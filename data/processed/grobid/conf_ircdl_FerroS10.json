{"bibliography":{"title":"FAST and NESTOR: How to Exploit Annotation Hierarchies","authors":[{"person_name":{"surname":"Ferro","first_name":"Nicola"},"affiliations":[{"department":"Department of Information Engineering","institution":"University of Padua","laboratory":null}],"email":"ferro@dei.unipd.it"},{"person_name":{"surname":"Silvello","first_name":"Gianmaria"},"affiliations":[{"department":"Department of Information Engineering","institution":"University of Padua","laboratory":null}],"email":"silvello@dei.unipd.it"}],"date":null,"ids":null,"target":null,"publisher":null,"journal":null,"series":null,"scope":null},"keywords":[],"citations":{"b0":{"title":"A formal model of annotations of digital content","authors":[{"person_name":{"surname":"Agosti","first_name":"M"},"affiliations":[],"email":null},{"person_name":{"surname":"Ferro","first_name":"N"},"affiliations":[],"email":null}],"date":{"year":"2007","month":null,"day":null},"ids":null,"target":null,"publisher":null,"journal":"ACM Trans. Inf. Syst","series":null,"scope":{"volume":26,"pages":null}},"b1":{"title":"The DELOS Digital Library Reference Model. Foundations for Digital Libraries","authors":[{"person_name":{"surname":"Candela","first_name":"L"},"affiliations":[],"email":null},{"person_name":{"surname":"Castelli","first_name":"D"},"affiliations":[],"email":null},{"person_name":{"surname":"Ferro","first_name":"N"},"affiliations":[],"email":null},{"person_name":{"surname":"Koutrika","first_name":"G"},"affiliations":[],"email":null},{"person_name":{"surname":"Meghini","first_name":"C"},"affiliations":[],"email":null},{"person_name":{"surname":"Pagano","first_name":"P"},"affiliations":[],"email":null},{"person_name":{"surname":"Ross","first_name":"S"},"affiliations":[],"email":null},{"person_name":{"surname":"Soergel","first_name":"D"},"affiliations":[],"email":null},{"person_name":{"surname":"Agosti","first_name":"M"},"affiliations":[],"email":null},{"person_name":{"surname":"Dobreva","first_name":"M"},"affiliations":[],"email":null},{"person_name":{"surname":"Katifori","first_name":"V"},"affiliations":[],"email":null},{"person_name":{"surname":"Schuldt","first_name":"H"},"affiliations":[],"email":null}],"date":{"year":"2007","month":"11","day":null},"ids":null,"target":null,"publisher":null,"journal":null,"series":null,"scope":null},"b2":{"title":"Introduction to Lattices and Order, 2nd edn","authors":[{"person_name":{"surname":"Davey","first_name":"B"},"affiliations":[],"email":null},{"person_name":{"surname":"Priestley","first_name":"H"},"affiliations":[],"email":null}],"date":{"year":"2002","month":null,"day":null},"ids":null,"target":null,"publisher":"Cambridge University Press","journal":null,"series":null,"scope":null},"b3":{"title":"Diplomatics: New Uses for an Old Science","authors":[{"person_name":{"surname":"Duranti","first_name":"L"},"affiliations":[],"email":null}],"date":{"year":"1998","month":null,"day":null},"ids":null,"target":null,"publisher":"Canadian Archivists in association with Scarecrow Press","journal":null,"series":null,"scope":null},"b4":{"title":"Annotation Search: The FAST Way","authors":[{"person_name":{"surname":"Ferro","first_name":"N"},"affiliations":[],"email":null}],"date":{"year":"2009","month":null,"day":null},"ids":null,"target":null,"publisher":"Springer","journal":null,"series":null,"scope":{"volume":5714,"pages":{"from_page":15,"to_page":26}}},"b5":{"title":"The NESTOR Framework: How to Handle Hierarchical Data Structures","authors":[{"person_name":{"surname":"Ferro","first_name":"N"},"affiliations":[],"email":null},{"person_name":{"surname":"Silvello","first_name":"G"},"affiliations":[],"email":null}],"date":{"year":"2009","month":null,"day":null},"ids":null,"target":null,"publisher":"Springer","journal":null,"series":null,"scope":{"volume":5714,"pages":{"from_page":215,"to_page":226}}},"b6":{"title":"The LEMO Annotation Framework: Weaving Multimedia Annotations With the Web","authors":[{"person_name":{"surname":"Haslhofer","first_name":"B"},"affiliations":[],"email":null},{"person_name":{"surname":"Jochum","first_name":"W"},"affiliations":[],"email":null},{"person_name":{"surname":"King","first_name":"R"},"affiliations":[],"email":null},{"person_name":{"surname":"Sadilek","first_name":"C"},"affiliations":[],"email":null},{"person_name":{"surname":"Schellner","first_name":"K"},"affiliations":[],"email":null}],"date":{"year":"2009","month":null,"day":null},"ids":null,"target":null,"publisher":null,"journal":"International Journal on Digital Libraries","series":null,"scope":{"volume":10,"pages":{"from_page":15,"to_page":32}}},"b7":{"title":"Digital Library Information-Technology Infrastructures","authors":[{"person_name":{"surname":"Ioannidis","first_name":"Y"},"affiliations":[],"email":null},{"person_name":{"surname":"Maier","first_name":"D"},"affiliations":[],"email":null},{"person_name":{"surname":"Abiteboul","first_name":"S"},"affiliations":[],"email":null},{"person_name":{"surname":"Buneman","first_name":"P"},"affiliations":[],"email":null},{"person_name":{"surname":"Davidson","first_name":"S"},"affiliations":[],"email":null},{"person_name":{"surname":"Fox","first_name":"E"},"affiliations":[],"email":null},{"person_name":{"surname":"Halevy","first_name":"A"},"affiliations":[],"email":null},{"person_name":{"surname":"Knoblock","first_name":"C"},"affiliations":[],"email":null},{"person_name":{"surname":"Rabitti","first_name":"F"},"affiliations":[],"email":null},{"person_name":{"surname":"Schek","first_name":"H"},"affiliations":[],"email":null},{"person_name":{"surname":"Weikum","first_name":"G"},"affiliations":[],"email":null}],"date":{"year":"2005","month":null,"day":null},"ids":null,"target":null,"publisher":null,"journal":"International Journal on Digital Libraries","series":null,"scope":{"volume":5,"pages":{"from_page":266,"to_page":274}}},"b8":{"title":"Set Theory-The Third Millenium edn","authors":[{"person_name":{"surname":"Jech","first_name":"T"},"affiliations":[],"email":null}],"date":{"year":"2003","month":null,"day":null},"ids":null,"target":null,"publisher":"Springer","journal":null,"series":null,"scope":null},"b9":{"title":"Encoded Archival Description. An Introduction and Overview","authors":[{"person_name":{"surname":"Pitti","first_name":"D"},"affiliations":[],"email":null}],"date":{"year":"1999","month":null,"day":null},"ids":null,"target":null,"publisher":null,"journal":"D-Lib Magazine","series":null,"scope":{"volume":5,"pages":null}},"b10":{"title":"Context Representation for Web Search Results","authors":[{"person_name":{"surname":"Vegas","first_name":"J"},"affiliations":[],"email":null},{"person_name":{"surname":"Crestani","first_name":"F"},"affiliations":[],"email":null},{"person_name":{"surname":"De La Fuente","first_name":"P"},"affiliations":[],"email":null}],"date":{"year":"2007","month":null,"day":null},"ids":null,"target":null,"publisher":null,"journal":"Journal of Information Science","series":null,"scope":{"volume":33,"pages":{"from_page":77,"to_page":94}}}},"sections":[{"title":"Motivations","paragraphs":[{"text":"DLs are getting the preponderant mean to manage, exchange and retrieve cultural heritage resources. DLs can be seen as tools for managing information resources of different kinds of organizations ranging from libraries, and museums to archives. In these different contexts, DLs permit the management of wide and different corpora of resources which range from books and archival documents to multimedia resources as pointed out in [8].","refs":[{"start":431,"end":434,"marker":"bibr","target":"#b7"}]},{"text":"Furthermore, DL are not only systems which permit the users to manage, exchange and retrieve digital objects or metadata, they are increasingly becoming part of the user's work. DL can enable the intellectual production process and support user cooperation and exchange of ideas. In this way, DL not only foster access to knowledge, but they are also part of knowledge creation and evolution. The evolution and transmission of knowledge has always been an interactive process between scientists or field experts and annotations have always been one of the main tools for this kind of interaction. In the digital era, annotations are still means of intellectual collaboration and in DL they are considered first-class digital objects [7]. They are also adopted in a variety of different contexts, such as content enrichment, data curation, collaborative and learning applications, and social networks, as well as in various information management systems, such as the Web (semantic and not), and databases.","refs":[{"start":733,"end":736,"marker":"bibr","target":"#b6"}]},{"text":"As an example, in Figure 1 we can see different kinds of annotations commenting an archival document managed by an archival system 1 . Documents in an archive are organized in a hierarchy [4] and the annotations may need to be attached both to the content -the actual documents -and to the structure -the How can I get there?","refs":[{"start":25,"end":26,"marker":"figure","target":null},{"start":188,"end":191,"marker":"bibr","target":"#b3"}]}]},{"title":"Follow the attached map","paragraphs":[]},{"title":"Re al ly","paragraphs":[{"text":"In te re st in g Fig. 1. Different kinds of annotation annotating an archival document relationships between the documents -of an archive. Furthermore, in Figure 1 we can see that an annotation can be a textual comment (i.e. \"really interesting\" which annotates the content of the document) or the expression of a user information need (i.e. \"How can I get there?\" which annotates an element of the archival structure); the map is an annotation provided by a user and conceptually attached to another annotation and not to an archival component.","refs":[{"start":22,"end":23,"marker":"figure","target":null},{"start":162,"end":163,"marker":"figure","target":null}]},{"text":"The previous example shows that annotations are a quite complex concept comprising a number of different aspects and in order to deal with this heterogeneity a formal model for digital annotations has been proposed in [1] and this model has been adopted by the FAST annotation service for representing and managing annotations. Furthermore, we pointed out the importance of annotating both the content and the structure of digital objects; in [6] we presented the NESTOR Framework which is based on two set data models alternative to the tree that permit us to model hierarchies handling structure and content in an independent way. The clear distinction and autonomous treatment of content and structure elements in the NESTOR Framework ease the adoption of services which consider the structural elements defining the organization of the objects of interest as relevant as the objects themselves. Indeed, it can be exploited by FAST enabling a natural way to annotate both the content and the structure of hierarchies of objects. Moreover, we shall see that also annotations can be shaped into a hierarchy and thus modeled throughout the NESTOR Framework as well enabling a uniform representation of both annotated objects and annotations.","refs":[{"start":218,"end":221,"marker":"bibr","target":"#b0"},{"start":443,"end":446,"marker":"bibr","target":"#b5"}]},{"text":"The use of NESTOR with annotations concerns: the data structure used to attach annotations to hierarchies and contents, the way in which annotations are accessed and exchanged in a distributed environment and the annotation search strategies.","refs":[]},{"text":"The paper is organized as follows: Section 2 points out the characteristics of FAST annotation model highlighting the hypertext created by annotations in a DL and their hierarchical structure. Section 3 introduces the theoretical foundations of the NESTOR framework. Section 4 describes how NESTOR can be applied to the presented annotation model and points out the advantages of this approach. Finally, Section 5 draws some final remarks.","refs":[]}]},{"title":"FAST Annotation Model","paragraphs":[{"text":"FAST adopts and implements the formal model for annotations proposed by [1] which has been also embedded in the reference model for digital libraries developed by DELOS, the European network of excellence on digital libraries [2]. According to this model an annotation is a compound multimedia object constituted by different signs of annotation which materialize the annotation itself; for example, we can have textual signs, which contain the textual content of the annotation, image signs, if the annotation is made up of images, and so on. In turn, each sign is characterized by one or more meanings of annotation which specify the semantics of the sign; for example, we can have a sign whose meaning corresponds to the title field in the Dublin Core (DC) metadata schema2 , in the case of a metadatum annotation, or we can a sign carrying a question of the author about a document whose meaning may be question or similar. Every annotation is uniquely identified by the pair (namespace, identifier).","refs":[{"start":72,"end":75,"marker":"bibr","target":"#b0"},{"start":226,"end":229,"marker":"bibr","target":"#b1"},{"start":775,"end":776,"marker":null,"target":"#foot_0"}]},{"text":"In the following, we need a terminology to distinguish between two kinds of digital objects: the generic ones managed by a digital library or available in the Web, which we call documents, and the ones that are annotations. Therefore, when we use the generic term digital object, we mean a digital object that can be either a document or an annotation.","refs":[]},{"text":"Annotations can be associated to a digital object, that can be both a document or an annotation, by two types of link:","refs":[]},{"text":"-annotate link: it permits to link an annotation to a part of a digital object.","refs":[]},{"text":"By means of annotate link an annotation can annotate one or more parts of a digital object expressing intra-digital object relationships between the different parts of the annotated digital object. An important constraint is that an annotation can annotate one and only one digital object. -relate-to link: it is intended to allow an annotation only to relate to one or more parts of other digital objects, but not the annotated one. Therefore, this kind of link lets the annotation express inter-digital object relationships, meaning that the annotation creates a relationship between the annotated digital object and the other digital objects related to it. By means of relate-to links an annotation can link more digital objects.","refs":[]},{"text":"From these definitions annotations can be seen as linking means between digital objects. Annotations permit us to create new relationships between the components of a digital objects, between different digital objects of the same DL or between digital objects belonging to different DLs. As shown in [1] the set of digital objects and annotations forms a labeled directed acyclic graph called document-annotation hypertext.","refs":[{"start":300,"end":303,"marker":"bibr","target":"#b0"}]},{"text":"Definition 1. Let A be the set of annotations, D the set of documents, and DO = A∪D the set of digital objects, which are either annotations or documents.","refs":[]},{"text":"The document-annotation hypertext is a labeled directed graph","refs":[]},{"text":"where:","refs":[]},{"text":"-DO = A ∪ D is the set of vertices; -E da is the set of edges; -l da : E da → LT , with LT = {annotate, relate-to}, is the labeling function which associates the corresponding link type to each edge.","refs":[]},{"text":"It has been proved in [1] that H da does not contain loops and cycles. Furthermore, we know that each annotation must annotate only one digital object, thus for each document there is a unique tree of annotations constituted by \"annotate\" edges that can be rooted in the document. For each annotation we can determine the unique path to the document root of the tree at which the annotation belongs. In this work we aim to point out the backbone of annotations which is composed by the \"annotate\" links; we are interested in independent threads of annotations rather than in the general structure of the annotation graph. The following proposition which is extensively described and proved in [1] outlines this aspect of annotations.","refs":[{"start":22,"end":25,"marker":"bibr","target":"#b0"},{"start":693,"end":696,"marker":"bibr","target":"#b0"}]}]},{"title":"Proposition 1.","paragraphs":[{"text":"Let H da = (DO , E da ) be the subgraph of H da , such that:","refs":[]},{"text":"H da is the subgraph whose edges are of the kind, Annotate, and whose vertices are incident with at least one of these edges. Let H da = (DO , E da ) be the underlying graph of H da , which is the undirected version of H da . The following properties hold:","refs":[]},{"text":"-H da is a forest; -every tree in H da contains a unique document vertex d.","refs":[]},{"text":"In Figure 2 we can see an example of document-annotation hypertext, the directed acyclic graphs (H da ) formed by the \"annotate\" links with the \"relate-to\" links are removed and the forest H da . The formal model for annotation provided a sound basis for designing and developing an XML Schema for the FAST annotation service. The FAST XSchema3 allows annotations and related entities to be represented and exchanged into a well-defined XML format. The FAST XSchema encodes both the content and the metadata about the annotation. For instance, it encodes the data about the user who created the annotation and about the groups sharing the annotation; at the same time the FAST XSchema permits us to encode the \"annotate\" and the \"relate-to\" links information.  ","refs":[{"start":10,"end":11,"marker":"figure","target":null},{"start":343,"end":344,"marker":null,"target":"#foot_1"}]}]},{"title":"The NESTOR Framework","paragraphs":[{"text":"We propose two set data models called Nested Set Model (NS-M) and Inverse Nested Set Model (INS-M) based on an organization of nested sets. The foundational idea behind these set data models is that an opportune set organization can maintain all the features of a tree data structure with the addition of some new relevant functionalities. We define these functionalities in terms of flexibility of the model, rapid selection and isolation of easily specified subsets of data and extraction of only those data necessary to satisfy specific needs. The most intuitive way to understand how these models work is to relate them to the well-know tree data structure. Thus, we informally present the two data models by means of examples of mapping between them and a sample tree. The first model we present is the Nested Set Model (NS-M). An organization of sets in the NS-M is a collection of sets in which any pair of sets is either disjoint or one contains the other. In figure 3 (b) we can see a tree mapped into a NS-M represented by the means of an Eulero-Venn diagram. We can see that each node of the tree is mapped into a set, where child nodes become proper subsets of the set created from the parent node. Every set is subset of at least of one set; the set corresponding to the tree root is the only set without any supersets and every set in the hierarchy is subset of the root set. The external nodes are sets with no subsets. The tree structure is maintained thanks to the nested organization and the relationships between the sets are expressed by the set inclusion order. The second data model is the Inverse Nested Set Model (INS-M). We can say that a tree is mapped into the INS-M transforming each node into a set, where each parent node becomes a subset of the sets created from its children. The set created from the tree's root is the only set with no subsets and the root set is a proper subset of all the sets in the set organization. The leaves are the sets with no supersets and they are sets containing all the sets created from the nodes composing the tree path from a leaf to the root. An important aspect of INS-M is that the intersection of every couple of sets obtained from two nodes is always a set representing a node in the tree. The intersection of all the sets in the INS-M is the set mapped from the root of the tree.","refs":[{"start":975,"end":976,"marker":"figure","target":"#fig_1"}]},{"text":"In Figure 3 (c) we can see a tree mapped into a INS-M represented throughout a DocBall representation [11]. The representation of the INS-M by means of the Euler-Venn diagrams is not very expressive and can be confusing for the reader, for these reasons we use the DocBall representation. We exploit the DocBall ability to show the structure of an object and to represent the \"inclusion order of one or more elements in another one\" [11]. The DocBall is composed of a set of circular sectors arranged in concentric rings as shown in Figure 3 (c). In a DocBall each ring represents a level of the hierarchy with the center (level 0) representing the root. In a ring, the circular sectors represent the nodes in the corresponding level. We use the DocBall to represent the INS-M, thus for us each circular sector corresponds to a set.","refs":[{"start":10,"end":11,"marker":"figure","target":"#fig_1"},{"start":102,"end":106,"marker":"bibr","target":"#b10"},{"start":433,"end":437,"marker":"bibr","target":"#b10"},{"start":540,"end":545,"marker":"figure","target":"#fig_1"}]},{"text":"It is worthwhile for the rest of the work to define some basic concepts of set theory: the family of subsets and the subfamily of subsets, with reference to [3] for their treatment. However, we assume the reader is confident with the basic concepts of ZFC axiomatic set theory [9], which we cannot extensively treat here for space reasons.","refs":[{"start":157,"end":160,"marker":"bibr","target":"#b2"},{"start":277,"end":280,"marker":"bibr","target":"#b8"}]}]},{"title":"Definition 2. Let A be a set, I a non-empty set and C a collection of subsets of A. Then a bijective function A : I -→ C is a family of subsets of A. We call I the index set and we say that the collection C is indexed by I.","paragraphs":[{"text":"We use the following notation {A i } i∈I to indicate the family A; the notation","refs":[]},{"text":"We call subfamily of {A i } i∈I the restriction of A to J ⊆ I and we denote this with {B j } j∈J ⊆ {A i } i∈I . Definition 3. Let {A i } i∈I be a family. We define {A i } i∈I to be a linearly ordered family if ∀A","refs":[]},{"text":"Furthermore, we can say that a family {A i } i∈I is a linearly ordered family if every two sets in {A i } i∈I are comparable. In literature a linearly ordered family is also called a chain. Definition 4. Let {A i } i∈I be a family . We define {A i } i∈I to be a topped family if","refs":[]},{"text":"defined to be a topless family. Definition 5. Let A be a set and let {A i } i∈I be a family. Then {A i } i∈I is a Nested Set family if:","refs":[]},{"text":"Thus, we define a Nested Set family (NS-F) as a family where three conditions must hold. The first condition (3.1) states that set A which contains all the sets in the family must belong to the NS-F. The second condition (3.2) states that the empty-set does not belong to the NS-F and the last condition (3.3) states that the intersection of every couple of distinct sets in the NS-F is not the empty-set only if one set is a proper subset of the other one.","refs":[]},{"text":"Theorem 2. Let T (V, E) be a tree and let Φ be a family where I = V and","refs":[]},{"text":"Then {V vi } vi∈V is a Nested Set family. This theorem defines how a tree is mapped into a NS-F, the proof and an extensive description can be found in [6].","refs":[{"start":152,"end":155,"marker":"bibr","target":"#b5"}]},{"text":"In the same way we can define the Inverse Nested Set Model (INS-M): Definition 6. Let A be a set and let {A i } i∈I be a family and let {B j } j∈J ⊆ {A i } i∈I be a sub-family. Then {A i } i∈I is an Inverse Nested Set family if: Theorem 3. Let T (V, E) be a tree and let Ψ be a family where I = V and","refs":[]},{"text":"Then {V vi } vi∈V is an Inverse Nested Set family. Differently from Theorem 2 we report the proof of this theorem because it is slightly different form the one presented in [6].","refs":[{"start":173,"end":176,"marker":"bibr","target":"#b5"}]},{"text":"Proof. By definition of the set of the ancestors of a node,","refs":[]},{"text":"). Let {B vj } vj ∈J be a subfamily of {V vi } vi∈V . We prove condition 3.5 by induction on the cardinality of J. |J| = 1 is the base case and it means that every subfamily {B vj } vj ∈J ⊆ {V vi } vi∈V is composed only by one set B v1 whose intersection is the set itself and belongs to the family {V vi } vi∈V by definition.","refs":[]},{"text":"For","refs":[]},{"text":") is a set of nodes that is composed of common ancestors of the n -1 considered nodes.","refs":[]},{"text":"For |J| = n, we have to show that","refs":[]},{"text":"). This would mean that v n has no ancestors in J and, consequently, in V ; at the same time, this would mean that v n is an ancestor of no node in J and, consequently, in V . But this means that V is the set of nodes of a forest and not of a tree. Now, we have to prove condition 3.6. Let {B vj } vj ∈J be a subfamily of","refs":[]},{"text":"This means that {B vj } vj∈J is a topped but not linearly ordered family.","refs":[]},{"text":"This means that we can find","refs":[]},{"text":"). This means that there are two paths from the root of T to v g , one through v h and a distinct one through v k , thus δ - V (v g ) = 2 and so T is not a tree.","refs":[]}]},{"title":"FAST and NESTOR: A Set-Theoretic View of Annotation Hierarchies","paragraphs":[{"text":"From the data model perspective, in the context of DLs we have to take into account both the organization of digital resources and the organization of annotations. In the Definition 1 we treated both annotations and documents as Digital Objects (DO), it is worthwhile for the rest of the work to maintain this notation and, as a generalization, we indicate as documents every resource type managed by a DL which is not an annotation.","refs":[]},{"text":"The NESTOR framework can be applied to all DO organizations with a tree structure. In the following we show how NESTOR can be applied to a tree where the nodes are documents and where each node can be the root of a sub-tree of annotations. The union of the document tree and the annotation sub-trees forms a DO tree that can be uniformly mapped into one of the set data models formalized in the NESTOR framework.","refs":[]},{"text":"Let T (D T , E T ) be a document tree where D T = {d i }, 1 ≤ i ≤ n is the set of documents representing the nodes of the tree and E T ⊂ D T × D T is the set of edges connecting the nodes. From Proposition 1 we know that for all d i ∈ D T may exist a tree H da [d i ] of annotations rooted in d i ; H da is a forest representing the union of all the trees H da [d i ]. From Definition 1 we know that DO = D ∪ A, thus we can define the tree T H (DO T H , E T H ) where DO T H = D T ∪ DO and E T H = E T ∪E da . T H (DO T H , E T H ) is a DO tree because its nodes may be both documents and annotations. In Figure 4 we can see a document tree, two annotation sub-trees and how the union of these trees forms a DO tree. From this Figure we can see that we have to deal we three trees each of those enabling the access to a different granularity level of information: T (D T , E T ) permits us to access only the documents managed by a DL, H da permits us to access only the annotations and the annotated documents (the roots of the annotation trees) and T H (DO T H , E T H ) permits us to access the whole resource space composed by documents and annotations.","refs":[{"start":612,"end":613,"marker":"figure","target":null}]},{"text":"All the DOs belonging to the tree T H (DO ","refs":[]}]},{"title":"T h (do t h , e t h )","paragraphs":[{"text":"T (D T , E T ) Fig. 4. A sample document tree T (DT , ET ) with two nodes which are roots of two annotation sub-trees inside the XML files; indeed, for instance, FAST XSchema permits us to encode the \"annotate\" links information and a similar approach is adopted by Encoded Archival Description (EAD) metadata format [10] in the archival context. The adoption of the NESTOR framework enables the separation of the information about the hierarchical structure of DOs from their content because the structural links are mapped into inclusion dependencies between sets. In the case of annotations only the \"annotate\" links can be treated by means of NESTOR because they form a tree structure; instead, the \"relate-to\" links form a directed acyclic graph that is out of the scope of NESTOR. Following the Theorems 2 and 3 the document tree, the annotation forest and the DO tree can be straightforwardly mapped into an equivalent number of NS-F or INS-F. We define {T i } i∈I to be the family mapped from T (D  T H ,E T H ). If the mapping from the trees to the families is done following Theorem 2 we obtain a collection of NS-F, as we can see in Figure 5, instead if it is done following Theorem 3 we obtain a collection of INS-F.","refs":[{"start":20,"end":21,"marker":"figure","target":null},{"start":317,"end":321,"marker":"bibr","target":"#b9"},{"start":1007,"end":1012,"marker":"figure","target":null},{"start":1012,"end":1017,"marker":"figure","target":null},{"start":1151,"end":1152,"marker":"figure","target":"#fig_3"}]},{"text":"In Figure 5 we represent only the structure of the NS-M, but every set can contain some elements such as XML files encoding the content of DOs. By means of NESTOR we separate the content from the hierarchical structure of DOs enabling a flexible way to access and exchange DOs in a distributed environment. In a distributed environment where two or more DLs exchange DOs we have to consider not only how to exchange the DOs but also which additional information may be necessary to properly understand the meaning of the exchanged DOs. For instance, if we consider the annotation A i ∈ H da , in order to understand its meaning we need, at least, to access the document annotated by A i . In order to infer the context of A i we need the DOs in the path from A i to the root of the tree H da . The information brought by the root of the annotation tree could be not sufficient to understand the proper meaning of A i , so we may have the necessity to reconstruct the path from A i up to the root of the document tree T (D T , E T ). By means of NESTOR these operations can be easily done by mapping the trees into the INS-M that fosters the reconstruction of the upper levels of the hierarchy. Then the reconstruction of the path becomes a series of set operations that do not involve the content of DOs (for instance the XML files encoding the DOs). If we consider the INS-F {T H k } k∈K we can determine the nearest common ancestor of two or more annotations simply intersecting the sets at which they belong; indeed, suppose we want to know the correlation between two annotations belonging to the same DO tree, by means of the INS-M we can determine their nearest common document throughout a single intersection operation between sets. On the other hand, we can decide to use the NS-M because it is useful to determine the descendants of a node. If we consider the NS-F {T i } i∈I , starting from a document we can reconstruct all its descendants in the document space, if we consider the collection of families H we can reconstruct all the annotations related to a document or related to a particular annotation and if we consider the NS-F T H (DO T H , E T H ) starting from a document we can easily reconstruct all its descendants both in the document and in the annotation spaces. Furthermore, the use of set data models permits us to change the structure of the hierarchy without affecting the DOs content; indeed any variation in the hierarchical structure will affect only the inclusion order between the sets and not the data that is encoded into the XML files.","refs":[{"start":10,"end":11,"marker":"figure","target":"#fig_3"}]}]},{"title":"Final Remarks","paragraphs":[{"text":"In this paper we have described how the NESTOR framework can be applied to the FAST system enabling a set-theoretical view of annotation hierarchies.","refs":[]},{"text":"We have shown that documents and annotations are often organized into tree data structures and how these hierarchies can be joined together in a tree representing the whole information space composed by documents and annotations. Furthermore, we have pointed out some of the advantages of using the set data models defined in the NESTOR framework. Future works will concern the definition of how to exchange annotations between DLs in a distributed environment exploiting the set-theoretical extension of the Open Archives Initiative Protocol for Metadata Harvesting (OAI-PMH) described in [6]. Furthermore, we shall analyze how the application of NESTOR affects the FAST search framework [5]. From the text-based search point-of-view, the NESTOR Framework can be exploited to display the search results in the right context of the hierarchy and not only in a flat ranked list.","refs":[{"start":590,"end":593,"marker":"bibr","target":"#b5"},{"start":689,"end":692,"marker":"bibr","target":"#b4"}]}]}],"tables":{},"abstract":{"title":"Abstract","paragraphs":[{"text":"In this paper we present the annotation model implemented by Flexible Annotation Service Tool (FAST) and the set-theoretical data models defined in the NEsted SeTs for Object hieRarchies (NESTOR) framework. We show how annotations assume a tree structure that can be exploited by NESTOR to improve access and exchange of Digital Objects (DOs) between Digital Librarys (DLs) in a distributed environment.","refs":[]}]}}