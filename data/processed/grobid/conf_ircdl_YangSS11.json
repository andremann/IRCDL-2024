{"bibliography":{"title":"Taxonomy Based Notification Service for the ASSETS Digital Library Platform","authors":[{"person_name":{"surname":"Yang","first_name":"Jitao"},"affiliations":[{"department":null,"institution":"Université Paris-Sud","laboratory":"Laboratoire de Recherche en Informatique"}],"email":"jitao.yang@lri.fr"},{"person_name":{"surname":"Sugibuchi","first_name":"Tsuyoshi"},"affiliations":[{"department":null,"institution":"Université Paris-Sud","laboratory":"Laboratoire de Recherche en Informatique"}],"email":"tsuyoshi.sugibuchi@lri.fr"},{"person_name":{"surname":"Spyratos","first_name":"Nicolas"},"affiliations":[{"department":null,"institution":"Université Paris-Sud","laboratory":"Laboratoire de Recherche en Informatique"}],"email":"nicolas.spyratos@lri.fr"}],"date":null,"ids":null,"target":null,"publisher":null,"journal":null,"series":null,"scope":null},"keywords":[],"citations":{"b0":{"title":"ASSETS project","authors":[],"date":null,"ids":null,"target":"http://www.assets4europeana.eu/","publisher":null,"journal":null,"series":null,"scope":null},"b1":{"title":"User notification in taxonomy based digital libraries","authors":[{"person_name":{"surname":"Belhaj-Frej","first_name":"H"},"affiliations":[],"email":null},{"person_name":{"surname":"Rigaux","first_name":"P"},"affiliations":[],"email":null},{"person_name":{"surname":"Spyratos","first_name":"N"},"affiliations":[],"email":null}],"date":{"year":"2006","month":null,"day":null},"ids":null,"target":null,"publisher":null,"journal":null,"series":null,"scope":{"volume":null,"pages":{"from_page":180,"to_page":187}}},"b2":{"title":"Fast user notification in large-scale digital libraries: experiments and results","authors":[{"person_name":{"surname":"Belhaj-Frej","first_name":"H"},"affiliations":[],"email":null},{"person_name":{"surname":"Rigaux","first_name":"P"},"affiliations":[],"email":null},{"person_name":{"surname":"Spyratos","first_name":"N"},"affiliations":[],"email":null}],"date":null,"ids":null,"target":null,"publisher":null,"journal":null,"series":null,"scope":{"volume":null,"pages":{"from_page":343,"to_page":358}}},"b3":{"title":"House of Scientists","authors":[{"person_name":{"surname":"Varna","first_name":"F"},"affiliations":[],"email":null},{"person_name":{"surname":"Curry","first_name":null},"affiliations":[],"email":null}],"date":{"year":"2007","month":null,"day":null},"ids":null,"target":null,"publisher":null,"journal":null,"series":null,"scope":null},"b4":{"title":"Metadata Inference for Document Retrieval in a Distributed Repository","authors":[{"person_name":{"surname":"Rigaux","first_name":"P"},"affiliations":[],"email":null},{"person_name":{"surname":"Spyratos","first_name":"N"},"affiliations":[],"email":null}],"date":{"year":"2004","month":null,"day":null},"ids":null,"target":null,"publisher":"Springer","journal":null,"series":null,"scope":{"volume":3321,"pages":{"from_page":418,"to_page":436}}},"b5":{"title":"Yfilter: Efficient and scalable filtering of XML documents","authors":[{"person_name":{"surname":"Diao","first_name":"Y"},"affiliations":[],"email":null},{"person_name":{"surname":"Fischer","first_name":"P"},"affiliations":[],"email":null},{"person_name":{"surname":"Franklin","first_name":"M"},"affiliations":[],"email":null},{"person_name":{"surname":"To","first_name":"R"},"affiliations":[],"email":null}],"date":{"year":"2002","month":null,"day":null},"ids":null,"target":null,"publisher":null,"journal":null,"series":null,"scope":{"volume":null,"pages":{"from_page":341,"to_page":342}}},"b6":{"title":"Predicate-based filtering of xpath expressions","authors":[{"person_name":{"surname":"Hou","first_name":"S"},"affiliations":[],"email":null},{"person_name":{"surname":"Jacobsen","first_name":"H"},"affiliations":[],"email":null}],"date":{"year":"2006","month":null,"day":null},"ids":null,"target":null,"publisher":null,"journal":null,"series":null,"scope":null},"b7":{"title":"Efficient filtering of XML documents with XPath expressions","authors":[{"person_name":{"surname":"Chan","first_name":"C"},"affiliations":[],"email":null},{"person_name":{"surname":"Felber","first_name":"P"},"affiliations":[],"email":null},{"person_name":{"surname":"Garofalakis","first_name":"M"},"affiliations":[],"email":null},{"person_name":{"surname":"Rastogi","first_name":"R"},"affiliations":[],"email":null}],"date":{"year":"2002","month":null,"day":null},"ids":null,"target":null,"publisher":null,"journal":"VLDB Journal","series":null,"scope":{"volume":11,"pages":{"from_page":354,"to_page":379}}},"b8":{"title":"Stream processing of xpath queries with predicates","authors":[{"person_name":{"surname":"Gupta","first_name":"A"},"affiliations":[],"email":null},{"person_name":{"surname":"Suciu","first_name":"D"},"affiliations":[],"email":null}],"date":{"year":"2003","month":null,"day":null},"ids":null,"target":null,"publisher":null,"journal":null,"series":null,"scope":{"volume":null,"pages":{"from_page":419,"to_page":430}}},"b9":{"title":"G-ToPSS: Fast filtering of graph-based metadata","authors":[{"person_name":{"surname":"Petrovic","first_name":"M"},"affiliations":[],"email":null},{"person_name":{"surname":"Liu","first_name":"H"},"affiliations":[],"email":null},{"person_name":{"surname":"Jacobsen","first_name":"H"},"affiliations":[],"email":null}],"date":{"year":"2005","month":null,"day":null},"ids":null,"target":null,"publisher":null,"journal":null,"series":null,"scope":{"volume":null,"pages":{"from_page":539,"to_page":547}}},"b10":{"title":"S-ToPSS:Semantic Toronto publish/subscribe system","authors":[{"person_name":{"surname":"Petrovic","first_name":"M"},"affiliations":[],"email":null},{"person_name":{"surname":"Burcea","first_name":"I"},"affiliations":[],"email":null},{"person_name":{"surname":"Jacobsen","first_name":"H"},"affiliations":[],"email":null}],"date":{"year":"2003","month":null,"day":null},"ids":null,"target":null,"publisher":null,"journal":null,"series":null,"scope":{"volume":null,"pages":{"from_page":1101,"to_page":1104}}},"b11":{"title":"An Ontology-Based Publish/Subscribe System","authors":[{"person_name":{"surname":"Wang","first_name":"J"},"affiliations":[],"email":null},{"person_name":{"surname":"Jin","first_name":"B"},"affiliations":[],"email":null},{"person_name":{"surname":"Li","first_name":"J"},"affiliations":[],"email":null}],"date":{"year":"2004","month":null,"day":null},"ids":null,"target":null,"publisher":"Springer","journal":null,"series":null,"scope":{"volume":3231,"pages":{"from_page":232,"to_page":253}}},"b12":{"title":"Incremental Query Answering for Implementing Document Retrieval Services","authors":[{"person_name":{"surname":"Haarslev","first_name":"V"},"affiliations":[],"email":null},{"person_name":{"surname":"Moller","first_name":"R"},"affiliations":[],"email":null}],"date":{"year":"2003","month":null,"day":null},"ids":null,"target":null,"publisher":null,"journal":null,"series":null,"scope":{"volume":null,"pages":{"from_page":85,"to_page":94}}}},"sections":[{"title":"Introduction","paragraphs":[{"text":"A modern digital library system is formed as a stack of various principals including software components, external systems and human beings as users. Message exchange among those principals is sometimes asynchronous, and/or loosely coupled (associations between senders and receivers might be dynamically changed), and/or multicast (one message might go to more than one destinations). The publish/subscribe pattern is a well-known design for enabling such flexible massage exchange. The publish/subscribe pattern can be modelled as interactions among publishers, subscribers, and a message broker (or a notification service). A subscriber expresses his interest as subscriptions and registers them to a notification service. A publisher creates a new message with its description and submits it to the notification service. The notification service compares a description of each message with each subscription, then notifies a subscriber about new messages matching his interest.","refs":[]},{"text":"We can find this pattern in many services in digital library systems. For instance:","refs":[]}]},{"title":"Personalized new item list","paragraphs":[{"text":"A user subscribes to messages about new items that match his interest.","refs":[]}]},{"title":"Digital preservation service","paragraphs":[{"text":"An expert subscribes to messages about operations affecting items that he is responsible for their consistency.","refs":[]}]},{"title":"User generated context service","paragraphs":[{"text":"A content creator subscribes to messages about reviewing processes of items he has submitted.","refs":[]},{"text":"However required methods to compare descriptions and subscriptions are slightly different in each scenario. In the scenario 3, the notification service needs to find message descriptions that contain a reviewer's id, a content creator's id and an item id designated in a subscription. For this purpose, we need only exact matching over ids to implement this scenario. On the other hand, when a user subscribes to \"European paintings\" in the scenario 1, the notification service should notify him about not only new \"European paintings\" but also new \"French paintings\", \"Italian paintings\", \"Spanish paintings\", and so forth. Scenario 1 and 2 require a more sophisticated method which takes account of is-a relations (or subsumption relations) to compare terms in descriptions and subscriptions.","refs":[]},{"text":"In the ASSETS (Advanced Service Search and Enhancing Technological Solutions for the European Digital Library), which is an EU co-funded project aiming to improve the usability of Europeana digital library platform by developing software services and user interfaces focused on search and browsing [1], we are trying to satisfy such heterogeneous requirements for notification by introducing a layered architecture to the design of the notification service. In the digital library platform developed by ASSETS, common functionalities shared by all notification services are implemented in the \"common notification service\". On the top of this common service, each technical partner in the ASSETS project can develop his own \"extended\" service which performs more specific application notification.","refs":[{"start":298,"end":301,"marker":"bibr","target":"#b0"}]},{"text":"The taxonomy based notification service we would like to report here is one of those extended notification services in the ASSETS platform. This service enables to compare descriptions and subscriptions by taking account of is-a relationships (or subsumption relations) among terms represented in a taxonomy. In the rest of this paper, we would like to show an outline of the ASSETS notification facility in section 2. Then we would like to give a description about a model for the taxonomy based notification implemented in our notification service in section 3. In section 4, we review some related research works. The development of the project described in this paper is still ongoing. In section 5, we would like to conclude this paper with some remarks about what we are going to achieve in a short term, and what we will extend this work in more future work.","refs":[]}]},{"title":"ASSETS Notification Facility","paragraphs":[{"text":"Through discussions with the developers from ASSETS partners, we have analyzed several usage scenarios of notification services including scenarios we explained in the last section. Based on the insight coming from this analysis, we have divided the ASSETS notification facility into a common part and a set of specific application parts. Fig   The base of the notification facility is the ASSETS common notification service. On the top of the common notification service, several extended notification services are implemented for more specific application purposes. The common notification service is the single point to submit all messages created by publishers. On the other hand, every notification service accepts subscription requests from subscribers. The common notification service aggregates all published message and performs a light-weight exact matching to compare message descriptions and subscriptions. Each extended notification service works as a client of the common notification service and it subscribes to specific subsets of all published messages. On the extracted part of message streams, each extended service performs more advanced comparison for more specific application notification. This layered design for implementing the publish/subscribe pattern enables 1) decoupling of publishers and subscribers, 2) single-source and multiple-use of massages, and 3) easy development of extended notification service.","refs":[{"start":339,"end":342,"marker":"bibr","target":null}]},{"text":"The taxonomy based notification service is one of those extended services. This service performs taxonomy based matching on condition that publishers, the notification service and subscribers use the same taxonomy. To share the same taxonomy with all principals in the notification workflow, the ASSETS notification facility has a taxonomy manager service which allows clients to register taxonomies and to retrieve registered taxonomies. By using this service, publishers and subscribers can get appropriate terms from a shared taxonomy for making their messages or subscriptions. Our notification can also access the same taxonomy for taxonomy based matching through the taxonomy manager service.","refs":[]}]},{"title":"Model of the Taxonomy Based Notification","paragraphs":[{"text":"The implementation of our taxonomy based notification is based on the approach proposed in [2]. The experimental results for evaluating the cost benefit obtained by this approach can be found in [3]. In this paper, we would like to introduce only the taxonomy based notification model used in this approach without details of algorithm and its cost evaluation.","refs":[{"start":91,"end":94,"marker":"bibr","target":"#b1"},{"start":195,"end":198,"marker":"bibr","target":"#b2"}]},{"text":"Roughly speaking, the notification in our context is an activity to notify a subscriber about published messages whose descriptions match some subscriptions registered by the subscriber. The taxonomy based notification is a variation of notification that tests whether a message matches a subscription or not by taking account of a taxonomy. We would like to start our explanation from the formal definition of taxonomy in our model.","refs":[]}]},{"title":"Terms, Subsumption Relations, and Taxonomies","paragraphs":[{"text":"Definition 1. Let T be a set of keywords, or terms. A taxonomy T defined over T is a tuple (T, ) where is a reflective and transitive binary relation over T , called subsumption relation.","refs":[]},{"text":"Given two terms s and t, if s t then we say that s is subsumed by t, or that t subsumes s. In our work, we assumes that every taxonomy (T, ) is a tree in which the nodes are the terms of T and where there is an arrow s → t iff s subsumes t in .  ","refs":[]}]},{"title":"Paintings","paragraphs":[]},{"title":"Descriptions","paragraphs":[{"text":"In order to deliver a message to appropriate subscribers, we need to provide a description of the message together with the identifier of the message. In informal definition, a description in our model is just a set of terms from a taxonomy. If the message is about an oil painting in a Venetian school style, the description of this message over T p is {Oil paintings, Venetian school paintings}.","refs":[]},{"text":"A description can be redundant if some of the terms it contains are subsumed by other terms. For instance, the description {Watercolors, Gouaches, Italian paintings} is redundant, as Watercolors subsumes Gouaches. Redundant descriptions are undesirable as they can lead to redundant computations during subscription evaluation. We shall limit our attention to non-redundant descriptions that have reduced sets of terms defined as follows: Definition 2. Given taxonomy (T, ), a set of terms D from T is called reduced if for any terms s and t in D, s t and t s.","refs":[]},{"text":"Following the above definition, we shall make non-redundant descriptions by removing all but the minimal terms instead of removing all but the maximal terms. Because the former way produces more accurate descriptions than the other. This should be clear from our previous example, where the description {Gouaches, Italian paintings} is more accurate than {Watercolors, Italian paintings}. Finally, we formally define descriptions as follows: ","refs":[]}]},{"title":"Subscription and Notification","paragraphs":[{"text":"In our model, a query is just a conjunction of terms from a taxonomy. In the following definition the symbol tail(t) stands for the set of all terms in the taxonomy T strictly subsumed by t, that is tail(t) = {f |f t}, R stands for the binary relation representing descriptions. Queries are defined over T and they are answered based on R. Definition 4. A query q over T is either a single term or a conjunction of terms from T . Its answer, denoted by ans(q), is a set of documents defined as follows:","refs":[]},{"text":"Case 1: q is a single term t from T , i.e., q = t ans(q","refs":[]},{"text":"For instance, let q = {Oil paintings, Italian paintings} be a query over taxonomy","refs":[]},{"text":"A subscription in our model is just a query describing (intentionally) the set of messages of interest to a user. In reality, a user can define his subscription by selecting terms from the taxonomy. The conjunction of the selected terms is the user's subscription. Actually, henceforth, we shall think of a subscription either as a set of terms (e.g., {Oil paintings, Italian paintings}) or as a query (e.g., Oil paintings ∧ Italian paintings). Now we define notification as an activity to inform about existence of answers for registered subscriptions (or queries). Definition 5. Let q be a query registered as a subscription by subscriber s. For a set of published messages represented as binary relation R, ans(q) ⊆ R answered based on R is notified to s.","refs":[]}]},{"title":"Refinement Relations and Subscription Trees","paragraphs":[{"text":"A naïve implementation of the notification is to test whether each incoming message should be notified or not for every subscriptions. However, if the set of subscriptions is large, and/or the rate of events is high, the system might become quickly overwhelmed.","refs":[]},{"text":"In our project, we use a more efficient approach based on the observation that this testing is basically a set membership test (i.e. testing whether a message belongs to a given set of messages). The idea is the following: if we have to perform test membership for every set in a collection of sets, we can save computations by starting with maximal sets first (maximality with respect to set inclusion). Indeed, if a message does not belong to a maximal set then we don't need to test membership for any of its subsets.","refs":[]},{"text":"In order to implement this idea, we need to define first a notion of refinement between subscriptions. In fact, we need a definition that translates the following intuition: if subscription q 1 refines subscription q 2 then every event that matches q 1 also matches q 2 . Definition 6. Let q 1 and q 2 be two subscriptions. We say that q 1 is finer than q 2 , denoted q 1 q 2 , iff ∀t 2 ∈ q 2 , ∃t 1 ∈ q 1 |t 1 t 2 .","refs":[]},{"text":"For instance, the subscription {Gouaches, Venetian school paintings, Bolognese school paintings} is finer than {Watercolors, Italian paintings}.","refs":[]},{"text":"A set S of all subscriptions and refinement relation over S becomes an upper semilattice. For details, see [4]. ","refs":[{"start":107,"end":110,"marker":"bibr","target":"#b4"}]}]},{"title":"Oil paintings","paragraphs":[]},{"title":"Italian paintings","paragraphs":[{"text":"With this graph, we start testing of a message for notification from q 1 which is the root of this graph. However, there are two paths from q 1 to q 4 in G s . As demonstrated in this example, the graph of a refinement relation can contains multiple paths leading to the same subscription. For a efficient traversal in a refinement relation graph, we need to extract a spanning tree from the graph. We call this tree subscription tree. An optimal subscription tree depends of probability of a message matching each subscription. An optimized algorithm for obtaining and incrementally updating optimal subscription trees is presented in [2].","refs":[{"start":636,"end":639,"marker":"bibr","target":"#b1"}]}]},{"title":"Implementation Approach","paragraphs":[{"text":"A problem in implementing the \"optimal\" algorithm proposed in [2] is that we usually cannot obtain fixed filtering rates. A filtering rate of a subscription is a probability of a message matching the subscription. If we estimate filtering rates from statistics of past messages, filtering rates change every time when a notification system accepts a message. The optimal subscription tree also might change along with changes of filtering rates. Filtering rates and optimal trees dynamically change during a publish/notification process. A naïve approach to keep trees optimal is to construct a subscription tree from scratch when filtering rates are changed, in other words, when message comes. Of course, it is not an acceptable solution because of its calculation cost.","refs":[{"start":62,"end":65,"marker":"bibr","target":"#b1"}]},{"text":"Another problem is the cost to estimate filtering rates. To estimate a filtering rate of a given subscription, we need to test the subscription with past messages to count messages matching the subscription. It means that the notification system needs to perform many matching tests every time when a user registers a new subscription.","refs":[]},{"text":"In this project, we adopt the following compromise approach for these problem:","refs":[]},{"text":"-Subscription trees are not updated along with changes of filtering rates when a new incoming message comes. -Subscription trees are periodically destroyed and re-constructed by using current instance of filtering rates. -To estimate the filtering rate of a subscription, we use the hit count that indicates the number of messages that have matched the subscription during notification processes.","refs":[]},{"text":"Filtering rates are firstly reflected to subscription trees by adding new subscription nodes to the subscription trees by taking account of current filtering rate based on the algorithm proposed in [2]. However, each change of filtering rates caused by a new incoming message is not reflected to the trees one-by-one. Those changes are reflected in bulk by periodically constructing new subscription trees from scratch. To construct a whole subscription tree is an expensive operation. Therefore, this operation is performed as a house-keeping task at a specific time interval.","refs":[{"start":198,"end":201,"marker":"bibr","target":"#b1"}]},{"text":"Regarding filtering rates, we count numbers of messages that match each subscription in notification processes. We directly use this hit count to estimate filtering rate. Let S = {s 1 , s 2 , . . . , s n } be a set of subscriptions, h(s) be the hit count of subscription s. In this approach, we simply estimate filtering rate σ(s i ) of subscription s i as σ(s i ) = h(s i )/ n j=1 h(s j ). Important difference from the naïve approach is that we do not compare a new subscription with any past messages. We test a subscription only with messages that come after the subscription has been registered. Therefore, a newer subscription usually has a less hit count than older one. This approach is based on an assumption that such bias will be flattened for the long-term period.","refs":[]},{"text":"In future work, we would like to evaluate the quality of subscription trees constructed based on this compromise approach by comparing with ones constructed by the optimal approach.","refs":[]}]},{"title":"Related Work","paragraphs":[{"text":"User notification has been studied for a long time and many systems support this function. The different methods of expressing the interest have led to several subscription schemas. Corresponding to different subscription schemas, the user notification systems can be classified as subject-based and content-based. In subject-based user notification systems, each publication belongs to a certain subject. The subscribers specify their interest in the particular subjects and they receive notifications whenever publications dispatched within the particular subjects. Subject-based notification systems limit the selectivity of subscriptions. The content-based system improves on subject-based system by allowing the subscription to contain complex query on publications' content.","refs":[]},{"text":"As the amount of information of the information system increase very fast, efficient and timely dissemination of messages is a key to distributing information to assist end-users. The matching computing problem has been investigated a lot. For tree-based data, [5][6][7][8] give algorithms for filtering XML documents based on XPath. For graph-structured data, [9][10][11][12] provide some methods and algorithms for tackling the graph-structured data filtering.","refs":[{"start":261,"end":264,"marker":"bibr","target":"#b5"},{"start":264,"end":267,"marker":"bibr","target":"#b6"},{"start":267,"end":270,"marker":"bibr","target":"#b7"},{"start":270,"end":273,"marker":"bibr","target":"#b8"},{"start":361,"end":364,"marker":"bibr","target":"#b9"},{"start":364,"end":368,"marker":"bibr","target":"#b10"},{"start":368,"end":372,"marker":"bibr","target":"#b11"},{"start":372,"end":376,"marker":"bibr","target":"#b12"}]},{"text":"We use subject based schema namely taxonomy based data model as presented in [2] in ASSESTS digital library platform for considering its following practical benefits:","refs":[{"start":77,"end":80,"marker":"bibr","target":"#b1"}]},{"text":"-Give suggestions for publication description and interest subscription. With the taxonomy data, the publisher can find some suitable professional terms to describe the contents that going to be published; on the other side, the subscribers can get suggestions during the subscription process, such as the user is interested in the architecture of ancient Greece, however, she is not quite familiar with the arts of ancient Greece, and she does not know exactly the name of the ancient architectures that were constructed in that period, then by browsing and clicking on the node named \"Architecture of ancient Greece\" in the taxonomy tree, the node can pop out sub-nodes named \"Temple of Hephaistos\", \"Erechtheion\" and the other ancient Greece architecture nodes. Therefore, the taxonomy data model can help the user to find the interesting things and the user can subscribe some of them. -Provide more exact notification messages for the subscribers. As described above, both the publication and subscription description use the terms from a same taxonomy, therefore the notification messages sent to the subscribers can exactly match the interests of the subscriber. Since no one likes spam messages, if the notification messages sent to the users are far from their interests, they may block the service. In addition, if we send a lot of notification messages to the users including the publications that have week matching to the subscription, then the large volume of messages would make the subscribers overwhelmed and the user may neglect the service. -Improve partially the \"cold start\" problem. \"cold start\" problem could be briefly described as at the beginning of the service goes live, there are not a lot of users would like to use the service. Taxonomy based data model can partially resolve the problem is because there are quite a part of people that do not know what to subscribe if just let them think about it by mind, therefore they do not use the service, however if we provide a taxonomy tree for them, possible the users just want to have a short time browsing of the taxonomy tree, while during the browsing, some of the terms may attract the interests of the users, then they use the service. -Avoid \"zero notification\" problem. If we let the users express their interest with any words they would like to use, there is the possibility that no notification messages would be sent to the users, because the words typed by the users are possible have no connections with our platform or the words are miss typed that the system can not retrieve the relevant publications for the subscription. -Simplify the subscription process. As mentioned above, if let the users express their interests just by thinking it in mind and write it down, there are a large part of the users would have no interest to express their interest, they just do not want to think too much. Therefore we provide a knowledge tree for the users, and by simple clicking operations they can find their interests occasionally, and then subscribe them. The taxonomy based data model can provide a simple and convenient service for the users.","refs":[]},{"text":"From the above description, we can find that the taxonomy data is very important for the success of the whole service, therefore a period dynamically maintain and improve of the taxonomy data is necessary. We will improve the taxonomy data based on the following methods:","refs":[]},{"text":"-Synchronize with the content augmentation of the digital library. Assume there will a large volume of \"Middle Ages European paintings\" be added to the digital library, while there is no such kinds of terms in the taxonomy tree, the taxonomy should be modified by adding a subtree with the terms describing the newly added contents. -Pay attention to the publishers' feedback. Some of the publishers are very professional, possible they are not very satisfied with some of the terms in the taxonomy or there are no suitable professional terms as they expected.","refs":[]},{"text":"Then we encourage them to send feedback to us, based on the analysis of their feedback, we improve the taxonomy data. -Take into account the subscribers' feedback. The subscribers' feedback is also very important for us, such as some of the users would like to book the notification information that does not exist in the taxonomy data tree, we will collect and analyze their requirements and consider if we can add the relevant contents to the digital library and modify the taxonomy. We also have a lot of professional users that their feedback is very important for our improvement.","refs":[]},{"text":"-Analyze the search log. The search records usually give feedback about the interests of the users, on the one side we should analyze if the platform can response the contents that meet the users requirement; on the other side, we should check if the taxonomy data cover all or most of the interests of the users.","refs":[]}]},{"title":"Conclusion","paragraphs":[{"text":"In this paper, we described an outline of our taxonomy based notification service for the ASSETS digital library problem. The major aim of this work is to make our service not only functional, but also reusable for implementing various features required by modern digital libraries. To achieve this goal, we carefully designed our notification model as an application-independent model. The current model is just a message exchange model and it does not include any concepts specific to digital libraries. Developers can implement actual notification applications on the top of (namely, as a client of) our notification service by associating concepts in each application domain with our model. At present, the development task of our taxonomy based notification service is ongoing. As short-term goal we will finalize the implementation of our notification service, then we will develop a \"new item list\" service as an example application of our service. Through this short term task we would like to proof our concept and do some preliminary evaluations of performance. In future work we expect that some \"spin out\" technologies being developed in the ASSETS project are adopted as a part of the Europeana digital library portal. If we have a chance to apply our technology to the real Europeana, it is an exciting challenge to deal with real number of users visiting a big portal by using our technologies. To achieve enough performance under such a massive setting, we might need to introduce additional technique for subscription lookup like hashing or indexing.","refs":[]}]}],"tables":{"tab_1":{"heading":"Table 1 .","description":"Relation Rp","rows":[["Term t","Message Identifier m"],["Oil paintings","m1"],["Oil paintings","m3"],["Gouaches","m2"],["Frescoes","m4"],["Venetian school paintings m3"],["Italian paintings","m4"],["Bolognese school paintings m5"],["French paintings","m6"],["Salon paintings","m5"],["Salon paintings","m6"]]}},"abstract":{"title":"Abstract","paragraphs":[{"text":"In this paper, we report our taxonomy-based notification service for the ASSETS digital library platform, which is being developed in an EU co-funded project. Notification is a very fundamental functionality for every living digital library which is continuously updated and dynamically interacts with users. The ASSETS platform provides a common notification service and its extensions based on the publish/subscribe pattern as a message notification infrastructure. Our taxonomy based notification service is one of those extensions that enables users to define subscriptions for receiving notifications by using a hierarchically organized controlled vocabulary, namely a taxonomy. Through this service, users can easily subscribe to messages about specific domain of their interest with a small number of terms in a taxonomy. Then system can efficiently filter a stream of published messages to deliver notifications to proper subscribers by taking account of the taxonomy. This service works as an important piece for enabling various advanced features in the ASSETS platform such as personalized new item lists and a digital preservation service. In this paper, we show an outline of the ASSETS notification architecture, and give a description about a model for the taxonomy-based notification implemented in our service.","refs":[]}]}}