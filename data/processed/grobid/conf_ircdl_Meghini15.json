{"bibliography":{"title":"Description Logics for Documentation","authors":[{"person_name":{"surname":"Meghini","first_name":"Carlo"},"affiliations":[{"department":"Istituto di Scienza e Tecnologie della Informazione","institution":"Consiglio Nazionale delle Ricerche","laboratory":null}],"email":"carlo.meghini@isti.cnr.it"}],"date":null,"ids":{"DOI":"10.1007/978-3-319-41938-1","arXiv":null},"target":null,"publisher":null,"journal":null,"series":null,"scope":null},"keywords":[],"citations":{"b0":{"title":"The Description Logic Handbook: Theory, Implementation, and Applications, 2nd edn","authors":[],"date":{"year":"2003","month":null,"day":null},"ids":null,"target":null,"publisher":"Cambridge University Press","journal":null,"series":null,"scope":null},"b1":{"title":"The semantic web","authors":[{"person_name":{"surname":"Berners-Lee","first_name":"T"},"affiliations":[],"email":null},{"person_name":{"surname":"Hendler","first_name":"J"},"affiliations":[],"email":null},{"person_name":{"surname":"Lassila","first_name":"O"},"affiliations":[],"email":null}],"date":{"year":"2001","month":null,"day":null},"ids":null,"target":null,"publisher":null,"journal":"Scientific American Magazine","series":null,"scope":null},"b2":{"title":"RDF vocabulary description language 1.0: RDF schema","authors":[{"person_name":{"surname":"Brickley","first_name":"D"},"affiliations":[],"email":null},{"person_name":{"surname":"Guha","first_name":"R"},"affiliations":[],"email":null}],"date":{"year":"2004","month":"02","day":null},"ids":null,"target":null,"publisher":null,"journal":null,"series":null,"scope":null},"b3":{"title":"RDF 1.1 XML syntax","authors":[{"person_name":{"surname":"Gandon","first_name":"F"},"affiliations":[],"email":null},{"person_name":{"surname":"Schreiber","first_name":"G"},"affiliations":[],"email":null}],"date":{"year":"2014","month":"02","day":null},"ids":null,"target":null,"publisher":null,"journal":"W3C Recommendation","series":null,"scope":null},"b4":{"title":"Formal ontology in information systems","authors":[{"person_name":{"surname":"Guarino","first_name":"N"},"affiliations":[],"email":null}],"date":{"year":"1998","month":null,"day":null},"ids":null,"target":null,"publisher":"IOS Press","journal":null,"series":null,"scope":{"volume":null,"pages":{"from_page":3,"to_page":15}}},"b5":{"title":"RDF Primer. W3C Recommendation","authors":[{"person_name":{"surname":"Manola","first_name":"F"},"affiliations":[],"email":null},{"person_name":{"surname":"Miller","first_name":"E"},"affiliations":[],"email":null}],"date":{"year":"2004","month":"02","day":null},"ids":null,"target":null,"publisher":null,"journal":null,"series":null,"scope":null},"b6":{"title":"OWL web ontology language overview","authors":[{"person_name":{"surname":"Mcguinness","first_name":"D"},"affiliations":[],"email":null},{"person_name":{"surname":"Van Harmelen","first_name":"F"},"affiliations":[],"email":null}],"date":{"year":"2004","month":"02","day":null},"ids":null,"target":null,"publisher":null,"journal":null,"series":null,"scope":null},"b7":{"title":"A model for digital libraries, its translation to RDF","authors":[{"person_name":{"surname":"Meghini","first_name":"C"},"affiliations":[],"email":null},{"person_name":{"surname":"Spyratos","first_name":"N"},"affiliations":[],"email":null},{"person_name":{"surname":"Sugibuchi","first_name":"T"},"affiliations":[],"email":null},{"person_name":{"surname":"Yang","first_name":"J"},"affiliations":[],"email":null}],"date":{"year":"2014","month":null,"day":null},"ids":null,"target":null,"publisher":null,"journal":"J. Data Semant","series":null,"scope":{"volume":3,"pages":{"from_page":107,"to_page":139}}},"b8":{"title":"OWL 2 Web Ontology Language Structural Specification and Functional-Style Syntax","authors":[{"person_name":{"surname":"Motik","first_name":"B"},"affiliations":[],"email":null},{"person_name":{"surname":"Patel-Schneider","first_name":"P"},"affiliations":[],"email":null},{"person_name":{"surname":"Parsia","first_name":"B"},"affiliations":[],"email":null}],"date":{"year":"2012","month":"12","day":null},"ids":null,"target":null,"publisher":null,"journal":null,"series":null,"scope":null},"b9":{"title":"OWL 2 Web Ontology Language Document Overview","authors":[],"date":{"year":"2012","month":"12","day":null},"ids":null,"target":null,"publisher":null,"journal":null,"series":null,"scope":null}},"sections":[{"title":"Introduction","paragraphs":[{"text":"In a digital library, it is often necessary to represent and reason about two different kinds of knowledge. One kind is domain knowledge, which in is typically embodied in metadata and ontologies, used by the end-users, for instance to discover and access the resources of the library. The other kind of knowledge concerns domain knowledge and is used by digital librarians in order to manage the resources of the library. For instance, a digital librarian might want to describe the provenance, or the degree of trust or the access policy of a metadata record. We call this latter kind of knowledge as documentation knowledge, since documentation is one of the main reasons that brings it into life. Documentation knowledge is a primary matter dealt with by curators in libraries and archives. In general, it shows up in any organization that devotes resources to the documentation of artifacts, events, users, services and in general any resource that is of value to the organization. Its scope of application is therefore quite ample. Documentation knowledge consists of factual and ontological statements about individuals, concepts and relations of the domain of dicourse, and as such it can be expressed and reasoned upon using standard logics, such as OWL [10]. However, a problem arises if documentation knowledge is to be used together with domain knowledge, as it happens in digital libraries. The problem is due to the fact that the individuals of documentation knowledge are domain knowledge statements, and in order to express knowledge about resources and about the statements used to describe such resources in the same language, one needs very powerful languages, whose expressive power goes beyond that of first-order logic. Such languages, though, are hardly usable in digital libraries, because their negative computational properties are inadequate to digital library requirements.","refs":[{"start":1263,"end":1267,"marker":"bibr","target":"#b9"}]},{"text":"The Resource Description Framework (RDF) [6] is a case in point. RDF allows to express metadata records as statements having the described resource as subject and metadata elements as properties. It also allows to express a certain amount of documentation knowledge, by allowing properties as subjects in statements. However, as soon as the expressivity of the language goes beyond that of RDF Schema [3] by including constructs from Description Logics, serious computational problems arise. Indeed, the combination of RDF with Description Logics yields the language OWL Full [7], which is undecidable in spite of the decidability of its two constituents.","refs":[{"start":41,"end":44,"marker":"bibr","target":"#b5"},{"start":401,"end":404,"marker":"bibr","target":"#b2"},{"start":576,"end":579,"marker":"bibr","target":"#b6"}]},{"text":"In this study, we tackle the problem of representing and reasoning about both domain and documentation knowledge by means of languages significantly more expressive than RDF, but we follow a different approach than RDF. Our approach is based on the simultaneous usage of two different logics: the object logic devoted to represent domain knowledge, and the documentation logic (or doc-logic for short) devoted to represent documentation knowledge. We view the resulting information system, which we call documentation system, as the backbone of a digital library, used for representing and reasoning about domain and documentation knowledge both in an independent and in a joint way, the latter option offering an innovative query functionality. As such, the present study extends the model presented in [8], which also allows to represent documentation knowledge, but whose expressive power does not go beyond that of RDF.","refs":[{"start":804,"end":807,"marker":"bibr","target":"#b7"}]},{"text":"In order to illustrate our approach in general terms, we choose the Description Logic ALCO [1] as the object logic, relying on the abstract syntax of DLs, which is more concise than the official OWL notation [4].","refs":[{"start":91,"end":94,"marker":"bibr","target":"#b0"},{"start":208,"end":211,"marker":"bibr","target":"#b3"}]}]},{"title":"Motivation","paragraphs":[{"text":"Much of the activity of digital librarians revolves around metadata records. A metadata record can be viewed as consisting of three separate parts: a description; a described object, the subject of the metadata record; and the attribution of the description to the subject. A description is a set of features. For instance, a description in a metadata record may consist of two features: (1) being a book and (2) being titled \"Waverley\". Each one of these features may be understood as describing a set of resources. In particular, the former feature describes anything that is a book, while the latter describes anything that is titled \"Waverley\". Taken together, the two features form a description that describes any resource satisfying both of them. In Description Logics (DLs for short), descriptions are represented by concepts, and in fact the two terms \"description\" and \"concept\" are synonymous; we will follow the same convention. In the DL ALCO, the above description may be represented by the concept Book âˆƒTitle.{Waverley} The attribution of a description to a particular subject is the act of asserting that that subject does indeed possess simultaneously all the features that make up the description. This attribution produces a metadata record. In a DL, attribution is realized by concept assertion, therefore in ALCO, the metadata record as a whole can be expressed by the following concept assertion: b : (Book âˆƒTitle.{Waverley}) where b is the DL individual that stands for the subject, a book in this case. In a DL knowledge base (KB for short), such an assertion is placed in the ABox, the component of the KB holding factual knowledge. The axioms of DLs can be used for modelling ontologies, understood as vocabularies that establish, via terminological axioms, the meaning of the concepts used in descriptions [5]. A terminological axiom in our example, could be the following: Book (âˆƒTitle.Literal âˆƒAuthor.Person) stating that every book has a title that is a literal, and an author that is a person. The ontology underlying an ABox is placed in the other component of a DL KB, the TBox. The discussion so far seems to indicate that DLs are adequate representation languages for the knowledge contained in a digital library. Indeed, OWL [10], the W3C recommendations that stand for DLs in the semantic web architecture [2], is known and used in digital libraries. However, there is a fundamental requirement of digital libraries that DLs are not able to capture. This requirement comes from the fact that documentation, a central activity in a digital library, may be a recursive process; it may not be solely confined to the domain of discourse, but it may also concern the descriptions and metadata records used for documenting the resources of the domain of discourse. For example, a digital librarian may need to represent the fact that a metadata record has a certain provenance, (i.e., it has been created by a certain person, on a certain date, as a result of a certain activity), or a certain degree of trustability; or that the record is subject to a certain set of access restrictions, or to a certain billing policy. In general, the same requirements arise in every information system that deals with the documentation of the individuals of the domain of discourse, be these individuals users, devices, or events.","refs":[{"start":1834,"end":1837,"marker":"bibr","target":"#b4"},{"start":2262,"end":2266,"marker":"bibr","target":"#b9"},{"start":2344,"end":2347,"marker":"bibr","target":"#b1"}]},{"text":"In order to cope with the recursiveness of documentation, we argue that a knowledge representation language is needed that offers descriptions as first class citizens, that is as individuals on their own right, endowed with an identity and a structure. In addition, the language in question should offer the machinery to attribute a description to a certain individual, which may itself be a description, thereby coping with the recursiveness of documentation. DLs, in spite of their name, fall short of this requirement. They offer a rich machinery to create descriptions, yet these descriptions are not denotable as individuals, and therefore it is not possible to state any knowledge on them, other than assertions and axioms. As such, the support that DLs offer to documentation is practically limited. The situation, however, is not unrecoverable. The machinery of DLs can be used to remedy at this inconvenient, by slightly shifting the focus of representation from the individuals, concepts and roles in the domain of discourse, to descriptions made up of these. The shift is a form of reification and leads to a logic, the doc-logic, that allows the expression of documentation knowledge, in contrast to the object-logic that is used for representing domain knowledge.","refs":[]},{"text":"In order to show how this can be done, in the next Section we introduce a doclogic corresponding to the object-logic ALCO. Our doc-logic will be doc-ALCO, more simply called as alco.","refs":[]}]},{"title":"Introducing alco","paragraphs":[{"text":"Suppose we wish to create the above description for the Waverley, and we also want such description to be identified as the individual d. In order to achieve our goal, in alco we describe the structure of d as the conjunction of two concepts, which we choose to identify as d 1 and d 2 . We use the alco role CCId (for Concept Conjunction Identification) for associating the identifier of a conjunction to the identifiers of the conjuncts, as follows:","refs":[]},{"text":"The role CCId binds an identifier to a concept part, and therefore we will call it a binding role.","refs":[]},{"text":"Next, we need to state that d 1 identifies an atomic concept, say Book. For this, we use the alco role ACId (for Atomic Concept Identification) as follows: ACId(d 1 , Book ) An assertion on the role ACId is in fact an assignment of an identifier to a whole concept, not just to a part of it, as in the case of binding roles; therefore will call ACId a concept identifying role, or more simply an identifying role. Of course, we could choose to use an atomic concept as an identifier of itself (e.g., the alco individual Book as an identifier of the ALCO concept Book ) to make a doc-KB more readable; but we prefer to use different names in order to avoid confusion. We also introduce in alco the role CNId (for Concept Negation Identification) for identifying negation concepts as follows: CNId(d, e) assigns the identifier d to the negation of the concept identified by e. Also CNId is an identifying role.","refs":[]},{"text":"As seen in the previous section, the title feature is expressed in ALCO as the concept âˆƒTitle.{Waverley}, known in the DL world as existential quantification. In order to reduce this concept to something denotable as the individual d 2 , we follow the same style followed above for concept conjunction, as follows:","refs":[]},{"text":"-we introduce the identifying role ARId (for Atomic Role Identification  d,b). The first argument of a CAss assertion is always a description identifier, whereas the second argument identifies the subject, which can be any resource. The CAss role allows to represent in alco an ALCO concept assertion. Yet, it is not adequate to document metadata record, because there is no individual that denotes the resulting metadata record in a CAss assertion. An alternative way of proceeding is to coin a name, say m, for the metadata record that we want to create, and then connect m to d and b by using appropriate role assertions, namely:","refs":[{"start":73,"end":75,"marker":"figure","target":null},{"start":75,"end":76,"marker":"figure","target":null}]},{"text":"There is an obvious relation between the just introduced roles and CAss. This relation will be captured by an axiom, introduced in next Section.","refs":[]},{"text":"So far we have simply used a rather cumbersome notation for expressing a concept assertion. However, this notation has given us identifiers for the description and the metadata record that we have created, therefore we are in the position of representing documentation knowledge about them. Suppose we want to state that d was created by John. The latter feature can be expressed as a description identified by e as follows: ARId(e 1 , Author ), SCId(e 2 , John), ERId(e, e 1 ), ECId(e, e 2 ) The description e can be attributed to d by stating CAss(e, d).","refs":[]},{"text":"Analogously we can document the metadata record m by specifying a creation time, a creation place and an author for it. We first create a description h for the ALCO concept âˆƒAuthor .{Sue}, using the alco roles (for brevity, we do not detail h); finally, we add the assertion: CAss(h, m) to the ABox of the doc-KB.","refs":[]},{"text":"In order to make alco a full doc-logic, we need a role for representing (at the doc-level) concept subsumptions in an object-TBox. To this end, we introduce CSAx (for Concept Subsumption Axiom) with the intended meaning that: CSAx(e, d) states that the concept identified by e is a sub-concept of the concept identified by d.","refs":[]}]},{"title":"Semantics","paragraphs":[{"text":"As a DL, alco has a well-defined semantics, based on the notion of interpretation. This notion, however, turns out to license undesired situations. In this section we discuss these undesired situations, and introduce axioms for ruling them out. These axioms are intended to be in the TBox of any doc-KB, since they express the semantics of the alco roles. In order to ease the expression of the axioms, we introduce some atomic concepts:","refs":[]},{"text":"-OInd, OACon and OARol, for representing individuals, atomic concepts and atomic roles of the object-DL, respectively; these concepts are defined as follows (as customary, âˆƒR abbreviates âˆƒR. ): Identification axioms. These axioms capture the proper behaviour of the binding and the identifying roles. First, identifying roles must behave like functions (in OWL terms, they are functional object properties [9]).","refs":[{"start":406,"end":409,"marker":"bibr","target":"#b8"}]},{"text":"Concerning the binding role CCId, every identifier used as a first argument in an assertion on this role, must appear as a first argument also in at least another assertion on the same role, because a conjunction has at least two conjuncts. We express this condition as follows: (= 1 CCId) âŠ¥.","refs":[]},{"text":"Moreover, for every ERId(d, e) assertion, there must be exactly one ECId(d, e ) assertion, for any individuals e, e ; and viceversa. In order to capture this constraint, which we call pairing constraint, it is not sufficient to include the axiom âˆƒERId â‰¡ âˆƒECId in the TBox. This is due to the fact that a DL KB is interpreted under the Open World Assumption. As a consequence, a KB whose ABox contains only the assertion ERId(d, R) and whose TBox contains the axiom âˆƒERId â‰¡ âˆƒECId is not inconsistent; rather, the KB is understood as implicitly stating that there exists some unknown individual z such that ECId(d, z) is true in every interpretation. We cannot therefore capture the pairing constraint as a TBox axiom; we will do it in a different way, illustrated in the next Section. Finally, binding and identifying roles must all together satisfy the obvious constraint that the domain of each one of them be disjoint from the domain of each of the others, otherwise it may happen that the same identifier be used to identify two concepts of different kinds. Assuming the above mentioned pairing constraints are in place, we need to consider only one of ERId and ECId because the domains of these two roles are made equivalent by the pairing constraint. So, overall we need to declare mutual disjointness of the domain of six roles; this requires fifteen axioms, all of the same type. For brevity, we only state the five axioms stating the disjointness of atomic concept identifiers from the other types of concept identifiers:","refs":[]},{"text":"Syntactic axioms. Syntactic axioms are those making sure that the syntax of the object-DL concepts is properly captured by the assertions of the doc-DL.","refs":[]},{"text":"A basic constraint of every DL, is that the symbols used for individuals, atomic concepts and roles come from three disjoint alphabets.","refs":[]}]},{"title":"(OACon OARol) âŠ¥; (OACon OInd) âŠ¥; (OARol OInd) âŠ¥","paragraphs":[{"text":"We also must make sure that concepts are properly formed in a doc-KB. To exemplify, if in the doc-KB there is the assertion that d identifies a negation, i.e., CNId(d, d 1 ), then d 1 must identify something, and a concept in particular. The second part of this constraint can be captured via an axiom, imposing that anything that appears as a second argument in a CNId assertion be a concept identifier, and the same for all the other concept constructors. This can be done by introducing the following axioms: (âˆ€CCId.ConcId);","refs":[]},{"text":"(âˆ€CNId.ConcId); (âˆ€ECId.ConcId) However, the first part of the constraint, namely that there be in the KB an explicit assertion binding d 1 to a concept, cannot be formalized as an axiom, again due to the Open World Assumption. Similarly to pairing constraints, we have therefore to find a different way of expressing this kind of constraints, which we call the syntactic constraints.","refs":[]},{"text":"Metadata axioms. Metadata axioms concern identifiers of metadata records. Our intended notion of a metadata record requires that a metadata record concern exactly one individual. In order to capture this intention, we introduce the following axiom: (â‰¥ 2 MRS) âŠ¥. Moreover, we need to enforce a pairing constraint for MRD and MRS, in the sense that for every assertion of the kind MRD(m, d), we want the KB to contain at least one assertion of the form MRS(m, i), for some individual i; and viceversa. For the reasons given above, also this kind of pairing constraint has to be captured in a different way. Finally, we include an axiom for capturing the previously mentioned relation between the role MRD and MRS from one side, and the role CAss from the other side. In fact, every time we use MRD and MRS for structuring a metadata record m, as in MRD(m, d) and MRS(m, b), we are implicitly asserting that the d describes b, that is, that CAss(d, b). In order to make this connection happen in a doc-KB, we introduce the axiom:","refs":[]},{"text":"where â€¢ is the role composition operator. Notice that this axiom leaves the freedom of inserting CAss assertions without the corresponding MRD and MRS assertions. In other words, it is possible to create concept assertions that are not metadata records, such as for instance the last assertion of the previous example.  CCId(d,d 2 ). More generally, modelling the semantics of CAss means laying down all the rules that capture implied concept assertions, ultimately leading to the axiomatization of (object-level) instance checking in the doc-logic.","refs":[{"start":320,"end":327,"marker":"figure","target":null},{"start":327,"end":328,"marker":"figure","target":null}]},{"text":"Likewise, modelling the semantics of the CSAx role amounts to axiomatize (object-level) concept subsumption in the doc-logic. In other words, the doc-logic does not only have to capture the syntax of the corresponding object-logic, but also its inference mechanism.","refs":[]},{"text":"The proof theory of DLs provides us with sound and complete inference methods for both instance checking and submsumption. These methods can be encoded in alco by means of axioms and semantic conditions, exactly in the same way the syntax rules of the object-logic are encoded. As a result, the users of the doc-KB would be able to exploit the implicit domain knowledge, typically for performing ask operations. In particular, in order to check whether an individual i is an instance of an object-concept c, it suffices to identify c via an individual d and then ask whether CAss(d, i) logically follows from the doc-KB. The same machinery also allows to do some consistency checking, for instance checking whether an individual is an instance of the âŠ¥ concept, or of a contradictory description. However, the price to be paid for achieving this goal would be very high, as the encoding of inference would make the doc-logic very complex. In what follows, we will present a much simpler method for attaining the same goal.","refs":[]},{"text":"In order to preserve the semantics of the alco roles, we assume that the doc TBox does not contain any axiom concerning these roles other than those given above.","refs":[]}]},{"title":"Strong Consistency","paragraphs":[{"text":"Suppose we want to add to the KB the assertion that b is not a book. In alco, the complext concept Â¬Book must first be created and identified, say as the individual f, by using the alco roles, and then f must be declared to be the negation of the atomic concept Book. There is already an identifier for the latter concept, namely d 1 , therefore all our replacement librarian must do, is to state: CNId(f, d 1 ) so that he can finally assert that b is an instance of f, by using the alco role assertion: CAss(f, b). By adding the last two assertions to those introduced in the Sect. 3, the consistency of the doc-KB is not broken. However, the represented knowledge is clearly inconsistent from an intuitive point of view, since b is asserted to be a book and not a book at the same time.","refs":[]},{"text":"One way to capture pairing and syntacting constraints while at the same time ruling out the last kind of inconsistency, is to try to transform a consistent doc-KB into its corresponding object-KB. In order to do so, ALCO concepts must be extracted from the assertions of the doc-ABox. If the doc-KB suffers from a pairing or a syntactic inconsistency, then this extraction is not possible because the assertions in the doc-ABox do not conform to the syntax of the doclogic. Otherwise the extraction is possible, and it allows to determine, for each concept identifier d in the doc-ABox, the concept identified by d, that we denote as Î½ D (d) (Î½(d) for simplicity). Once the function Î½ is determined, the doc-KB can be transformed into its corresponding object-KB, and the obtained object-KB can be checked for consistency. If this check succeeds, then the doc-KB satisfies all the intuitive consistency criteria. This approach gives us a simple method for checking consistency of the doc-KB. A further advantage of it, is that we no longer need to model object level instance checking or subsumption as implicit CAss and CSAx assertions, respectively; we can transform the doc-KB and perform these inferences on the resulting object-KB, by relying on well-known algorithms. This is the route that we will follow in the rest of the paper. To this end, we will first define how to determine the function Î½ from a given doc-KB D. Based on the existence of Î½(d) for each concept identifier d, we will define a stronger consistency criterion for a doc-KB. Next, we state the transformation Ï† from a doc-KB to its corresponding object-KB and define the strongest consistency criterion of a doc-KB based on the consistency of its corresponding object-KB. The domain of the function Î½ is the set of concept identifiers:","refs":[]},{"text":"and can be efficiently determined as the set of identifiers that occur as first arguments in a binding or in an identifying role assertion. For each d âˆˆ dom(Î½), the value of Î½(d) is recursively defined in Table 1. By iterating this recursive computation on dom(Î½), the function Î½ can be efficiently computed.","refs":[{"start":211,"end":212,"marker":"table","target":"#tab_1"}]},{"text":"Intuitively, if D = (T, A) is a consistent doc-KB, then exactly one of the conditions on the right column of Table 1, excluding the last row, is met by the ABox A, that is:","refs":[{"start":115,"end":116,"marker":"table","target":"#tab_1"}]},{"text":"in other words Î½ is total on D. Based on this consideration we define a doc-KB D = (T, A) to be fully consistent if Î½(d) is total on D.","refs":[]},{"text":"Let us now consider how to define the transformation Ï†. The DL alco offers the roles CSAx and CAss for representing the terminological axioms and the assertions of the object-KB, respectively. Therefore, it is natural to use assertions on the former role in order to derive the axioms in the object-TBox, and assertions on the latter role in order to derive the axioms in the object-ABox. Formally, given a doc-KB D = (T, A), we have Ï†(D) = (T , A) where:","refs":[]},{"text":"Some explanations are in order concerning the translation of CAss assertions. Any such assertion has the form CAss(d, i) where d is a description identifier and i is either a description identifier (such as e in the example above) or an individual denoting any other kind of resource (such as the book b in the example above). In the latter case, i does not have to be translated, as there would be nothing to translate it into. In the former case, i is a concept identifier and d another concept identifier that describes i. If we translate both identifiers into the corresponding concepts, the result will be an assertion like C : D where both C and D are object-concepts. In our example, the translation would look like:","refs":[]},{"text":"(Book âˆƒTtile.{W averley}) : âˆƒAuthor .{John}","refs":[]},{"text":"The last expression reads \"John created the description Book titled 'Waverley' \", which is precisely what we want to say. However, the above is not a valid assertion in any DL, and this is the very reason why we set out to define the doc-DL. Therefore, we have no choice but to translate only the second identifier. This will result in the concept assertion: d : âˆƒAuthor .{John} This means that d will appear in the object-KB, but its connection with the description that it identifies (i.e., (Book âˆƒTtile.{W averley})) is lost in the object-KB. Notice that we require CAss(d, i) to be not only explicitly asserted, but also implicitly present in the KB, typically as a consequence of the creation of a metadata record. Table 2 shows the translation of the doc-KB of our example. Based on these considerations, we say that a doc-KB D = (T, A) is strongly consistent if D is fully consistent and Ï†(D) is a consistent ALCO KB. Moreover, we define a documentation system S to be a pair S = D, O where D is a doc-KB and O is an object-KB, such that O = Ï†(D).","refs":[{"start":726,"end":727,"marker":"table","target":"#tab_2"}]}]},{"title":"Querying a Documentation System","paragraphs":[{"text":"The two KBs in a DS can be queried individually, based on the kind of knowledge they store. As customary, we will denote the answer to an object query ","refs":[]},{"text":"There is a third category of queries, which we call mixed queries, that can be asked to a DS. Mixed queries involve both domain and documentation knowledge, and can be of one of two kinds: (1) mixed-object queries, asking for the resources of the object-KB that satisfy some property expressed in the doc-KB; for instance, a mixed-object query may ask for the editions of the Waverley that have been described by John; (2) mixed-doc queries, asking for the resources of the doc-KB that satisfy some property expressed in the object-KB; for instance, a mixed-object query may ask for the metadata records of the Waverley that have been created by Sue. In order to express mixed queries, we need to address both the object-and the doc-KB. One way of doing so, is to use the operators Ask o and Ask d within queries. Using these two operators, the editions of the Waverley described by John can be expressed as follows:","refs":[]},{"text":"This is a concept denoting the individuals in the object-KB that are known to be books titled Waverley, and that are known in the doc-KB to be described by a description authored by John. Notice the double nesting of the Ask operator, without which it would not be possible to express the query. This implies that asking a doc-KB may require asking a object-KB. Let us now consider the mixeddoc query asking for the metadata records of the Waverley authored by Sue.","refs":[]},{"text":"Using the same ask operators introduced above, this query can be expressed as:","refs":[]},{"text":"âˆƒMRD.(âˆƒCAss.Ask o (âˆƒTitle.{Waverley})) Ask o (âˆƒAuthor .{Sue}) This is a conjunction of two concepts: the first concept denotes the metadata records whose description describes an individual known in the object-KB to be titled Waverley. The second concept denotes the individuals known in the object-KB to be authored by Sue. The syntax of our query language, which we call Documentation Query Language (DQL for short), is given by the following rules: In order to give the semantics of DQL, the interpretations of the doc-and the object-DL are combined in a rather obvious way. For simplicity, we omit such specification, pointing out that it allows us to reduce query answering on a DS to query answering on a single KB whose TBox is given by the union of the TBoxes of the doc-and the object-KBs, and the same for the ABox. In order to show the effects of this result, let us now return to our example queries. From a semantical point of view, the former query above: Book âˆƒTitle.{Waverley} Ask d (âˆƒCAss -.Ask o (âˆƒAuthor .{John})) stated against our example DS in Table 2, is equivalent to the query Book âˆƒTitle.{Waverley} âˆƒCAss -.âˆƒAuthor .{John} stated against the union of the KBs shown in the first and third column of the table. The union contains the assertions: ","refs":[{"start":1072,"end":1073,"marker":"table","target":"#tab_2"}]}]},{"title":"Conclusions","paragraphs":[{"text":"We have presented documentation systems as constituents of digital libraries, using description logics to represent and reason about domain and documentation knowledge at the same time. In particular, the KB of a documentation system consists of an object-KB and of a doc-KB. In the object-TBox, it is possible to express domain ontologies as terminological axioms, whereas in the object-ABox it is possible to express metadata records as DL concept assertions. In the doc-ABox, it is possible to make assertions involving descriptions and the metadata records of the object-KB Abox, thereby representing documentation knowledge. As such, a documentation system significantly extends the expressive capabilities of current digital libraries, mostly based on RDF.","refs":[]}]}],"tables":{"tab_1":{"heading":"Table 1 .","description":"Assignment of object-DL concepts to identifiers","rows":[["Î½(d)","if the doc-ABox contains"],["A","ACId(d, A)"],["R","ARId(d, R)"],["Î½(e1) . . . Î½(en) CCId(d, e1), . . . , CCId(d, en), n maximal"],["Â¬Î½(e)","CNId(d, e)"],["âˆƒÎ½(e).Î½(f )","ERId(d, e) and ECId(d, f )"],["{o}","SCId(d, o)"],["Ï‰","otherwise"]]},"tab_2":{"heading":"Table 2 .","description":"Summary of the running example","rows":[["doc-ABox","Î½","object-ABox"],["CCId(d, d1), CCId(d, d2)","d â†’ Î½(d1) Î½(d2)",""],["ACId(d1, Book )","d1 â†’ Book",""],["ERId(d2, d3), ECId(d2, d4)","d2 â†’ âˆƒÎ½(d3).Î½(d4)",""],["ARId(d3, Title)","d3 â†’ Title",""],["SCId(d4, Waverley)","d4 â†’ {Waverley}",""],["CAss(d, b)","","b : Book"],["","","âˆƒTitle.{Waverley}"],["MRD(m, d), MRS(m, b)","",""],["ERId(e, Author ), ECId(e, e1) e â†’ âˆƒAuthor .Î½(e1)",""],["SCId(e1, John)","e1 â†’ {John}",""],["CAss(e, d)","","d : âˆƒAuthor .{John}"],["ERId(h, Author ), ECId(h, h1) h â†’ âˆƒAuthor .Î½(h1)",""],["SCId(h1, Sue)","h1 â†’ {Sue}",""],["CAss(h, m)","","m : âˆƒAuthor .{Sue}"]]}},"abstract":{"title":"Abstract","paragraphs":[{"text":"Much of the activity in a digital library revolves around collecting, organizing and publishing knowledge about the resources of the library, in the form of metadata records. In order to document such activity, digital librarians need to express knowledge about the metadata records they produce. This knowledge, which we call documentation knowledge, may express e.g., provenance, trustability, or access restrictions of the records. Today, documentation knowledge is mostly represented in digital libraries via RDF. We propose a new type of information system, called documentation system, as a basic component of a digital library allowing to represent and reason about both domain and documentation knowledge in an expressive language such as OWL.","refs":[]}]}}