{"bibliography":{"title":"Metadata Inference for Description Authoring in a Document Composition Environment","authors":[{"person_name":{"surname":"Sugibuchi","first_name":"Tsuyoshi"},"affiliations":[{"department":null,"institution":"Université Paris-Sud","laboratory":"Laboratoire de Recherche en Informatique"},{"department":null,"institution":"Université Paris-Sud","laboratory":"Laboratoire de Recherche en Informatique"}],"email":"tsuyoshi.sugibuchi@lri.fr"},{"person_name":{"surname":"Ly","first_name":"Anh"},"affiliations":[{"department":null,"institution":"Université Paris-Sud","laboratory":"Laboratoire de Recherche en Informatique"}],"email":null},{"person_name":{"surname":"Tuan","first_name":"Nicolas"},"affiliations":[{"department":null,"institution":"Université Paris-Sud","laboratory":"Laboratoire de Recherche en Informatique"}],"email":null},{"person_name":{"surname":"Spyratos","first_name":null},"affiliations":[{"department":null,"institution":"Université Paris-Sud","laboratory":"Laboratoire de Recherche en Informatique"}],"email":null},{"person_name":{"surname":"Tuan","first_name":"L"},"affiliations":[{"department":null,"institution":"Université Paris-Sud","laboratory":"Laboratoire de Recherche en Informatique"}],"email":null},{"person_name":{"surname":"Spyratos","first_name":"N"},"affiliations":[{"department":null,"institution":"Université Paris-Sud","laboratory":"Laboratoire de Recherche en Informatique"}],"email":"nicolas.spyratos@lri.fr"}],"date":null,"ids":null,"target":null,"publisher":null,"journal":null,"series":null,"scope":null},"keywords":[],"citations":{"b0":{"title":"Connexions web site","authors":[],"date":null,"ids":null,"target":"http://cnx.org/","publisher":null,"journal":null,"series":null,"scope":null},"b1":{"title":"Metadata Inference for Document Retrieval in a Distributed Repository","authors":[{"person_name":{"surname":"Rigaux","first_name":"P"},"affiliations":[],"email":null},{"person_name":{"surname":"Spyratos","first_name":"N"},"affiliations":[],"email":null}],"date":{"year":"2004","month":null,"day":null},"ids":null,"target":null,"publisher":"Springer","journal":null,"series":null,"scope":{"volume":3321,"pages":{"from_page":418,"to_page":436}}},"b2":{"title":"OWL 2 Web Ontology Language Document Overview","authors":[],"date":null,"ids":null,"target":"http://www.w3.org/TR/owl2-overview/","publisher":null,"journal":null,"series":null,"scope":null},"b3":{"title":"SKOS Simple Knowledge Organization System Reference","authors":[],"date":null,"ids":null,"target":"http://www.w3.org/TR/skos-reference/","publisher":null,"journal":null,"series":null,"scope":null},"b4":{"title":"The Gene Ontology Consortium Gene Ontology: tool for the unification of biology","authors":[],"date":{"year":"2000","month":null,"day":null},"ids":null,"target":null,"publisher":null,"journal":"Nature Genetics","series":null,"scope":{"volume":25,"pages":{"from_page":25,"to_page":29}}},"b5":{"title":"AAT Web site","authors":[],"date":null,"ids":null,"target":"http://www.getty.edu/research/tools/vocabularies/aat/","publisher":null,"journal":null,"series":null,"scope":null},"b6":{"title":"The DBPedia Ontology","authors":[],"date":null,"ids":null,"target":"http://wiki.dbpedia.org/Ontology","publisher":null,"journal":null,"series":null,"scope":null},"b7":{"title":"Modern Information Retrieval","authors":[],"date":{"year":"1999","month":null,"day":null},"ids":null,"target":null,"publisher":"Addison-Wesley","journal":null,"series":null,"scope":null},"b8":{"title":"From Manual to Semiautomatic Semantic Annotation: About Ontology-Based Text Annotation Tools","authors":[{"person_name":{"surname":"Erdmann","first_name":"M"},"affiliations":[],"email":null},{"person_name":{"surname":"Maedche","first_name":"A"},"affiliations":[],"email":null},{"person_name":{"surname":"Schnurr","first_name":"H.-P"},"affiliations":[],"email":null},{"person_name":{"surname":"Staab","first_name":"S"},"affiliations":[],"email":null}],"date":{"year":"2000","month":null,"day":null},"ids":null,"target":null,"publisher":null,"journal":null,"series":null,"scope":null},"b9":{"title":"On deep annotation","authors":[{"person_name":{"surname":"Handschuh","first_name":"S"},"affiliations":[],"email":null},{"person_name":{"surname":"Staab","first_name":"S"},"affiliations":[],"email":null},{"person_name":{"surname":"Volz","first_name":"R"},"affiliations":[],"email":null}],"date":{"year":"2003","month":null,"day":null},"ids":null,"target":null,"publisher":null,"journal":null,"series":null,"scope":{"volume":null,"pages":{"from_page":431,"to_page":438}}},"b10":{"title":"Multimedia Semantic Annotation Propagation","authors":[{"person_name":{"surname":"Pastorello","first_name":"G"},"affiliations":[],"email":null},{"person_name":{"surname":"Daltio","first_name":"J"},"affiliations":[],"email":null},{"person_name":{"surname":"Medeiros","first_name":"C"},"affiliations":[],"email":null}],"date":{"year":"2008","month":null,"day":null},"ids":null,"target":null,"publisher":null,"journal":null,"series":null,"scope":{"volume":null,"pages":{"from_page":509,"to_page":514}}},"b11":{"title":"Scalable Semantic Annotation Using Lattice-Based Ontologies","authors":[{"person_name":{"surname":"Leung","first_name":"M.-K"},"affiliations":[],"email":null},{"person_name":{"surname":"Mandl","first_name":"T"},"affiliations":[],"email":null},{"person_name":{"surname":"Lee","first_name":"E"},"affiliations":[],"email":null},{"person_name":{"surname":"Latronico","first_name":"E"},"affiliations":[],"email":null},{"person_name":{"surname":"Shelton","first_name":"C"},"affiliations":[],"email":null},{"person_name":{"surname":"Tripakis","first_name":"S"},"affiliations":[],"email":null},{"person_name":{"surname":"Lickly","first_name":"B"},"affiliations":[],"email":null}],"date":{"year":"2009","month":null,"day":null},"ids":null,"target":null,"publisher":"Springer","journal":"LNCS","series":null,"scope":{"volume":5795,"pages":{"from_page":393,"to_page":407}}}},"sections":[{"title":"Introduction","paragraphs":[{"text":"Today's growth of digital publishing is bringing about not only media migration from atom to bit, but also more flexibility in authoring and customizing digital documents after their publication. For example, several non-profit projects and commercial companies start to offer open textbook platforms that intend to allow textbook authors, educators and students to create and customize textbooks. An interesting example is the Connexions project [1] funded by Rice University. In the Connexions' repository, every textbook is managed as a collection of individual learning objects called modules. The Connexions' website allows users not only to read textbooks but also to create and customize textbooks by composing modules taken from a variety of existing textbooks.","refs":[{"start":447,"end":450,"marker":"bibr","target":"#b0"}]},{"text":"To make a new textbook by composing fragments of existing textbooks, authors need to find appropriate fragments from textbook repositories. At present, most open textbook platforms adopt description based document management. In such systems, each document and its fragments are associated with their descriptions, also called metadata. Usually metadata contains free-text information including title, short description and free keywords, and information based on controlled vocabularies, or taxonomies, including subject category, topic group, etc. Information based on controlled vocabularies is useful for more accurate and intelligent content retrieval, if metadata is properly created and maintained.","refs":[]},{"text":"If we intend to allow users to take fragments from textbooks with smaller granularity, the cost of authoring many metadata for each textbook fragment might be a problem. A clue for reducing such metadata authoring cost is the fact that each fragment of a textbook is usually part of a bigger context. For instance, a section of a textbook usually has a previous or next siblings, and a parent chapter that encloses child sections. By taking into account such relationships among fragments, we can infer metadata of new fragments from the metadata of existing fragments. Metadata of textbook fragments should be manually made by human-beings, but machines can also \"suggest\" inferred metadata. Such metadata suggestions will help users in easily making metadata.","refs":[]},{"text":"In this paper, we propose a simple metadata management model for document composition environments. Our work is based on the metadata inference model for composite documents proposed in [2]. The model described in [2] mainly focuses on document sharing. In the present paper, we focus on the actual usage of metadata for authoring document descriptions. We give the formal definition of our metadata model and demonstrate how it can be used to suggest terms for descriptions based on descriptions of existing documents.","refs":[{"start":186,"end":189,"marker":"bibr","target":"#b1"},{"start":214,"end":217,"marker":"bibr","target":"#b1"}]},{"text":"In the rest of this paper we first review some related studies (Section 2). Then we describe our metadata model and some algorithms for inferring metadata (Section 3). Based on this model, we introduce a criterion that every description should satisfy, and then we explain how our \"term suggestion\" by using this criterion (Section 4).","refs":[]}]},{"title":"Related Work","paragraphs":[{"text":"A lot of efforts have been devoted recently to develop languages and tools to generate, store and query metadata. Some of the most noticeable achievements are the RDF language, RDF schemas and several standards for representing controlled vocabulary including OWL [3] and SKOS [4]. By using such languages and standards, several controlled vocabularies for metadata have been developed and are widely used in practice. These vocabularies include Gene Ontology [5] (genomics), AAT [6] (arts and architectures), DBPedia Ontology [7] (cross-domain ontology) and others. Most of these vocabularies are structured as general graphs including cycles. Even then most of these vocabularies also include hierarchically organized \"is-a\" relationships of terms. In this paper, we focus on taxonomy-based annotations [8] to describe the content by using such hierarchically organized sets of terms. Generation of such annotations still remains mostly a manual process, possibly supported by acquisition software (for instance [9]). Many of such annotation supports are performed by text analysis techniques (for instance [10]) and some researches deal with annotation propagation to infer metadata of derived contents from those of the original based content authoring processes [11] [12]. The work in [2] which is the basis of our study also proposes a metadata inference model for composite documents. However, the inference model of [2] is mainly intended for document repository management. In contrast, the inference model that we propose here is intended for document description authoring, including creation and modification.","refs":[{"start":264,"end":267,"marker":"bibr","target":"#b2"},{"start":277,"end":280,"marker":"bibr","target":"#b3"},{"start":460,"end":463,"marker":"bibr","target":"#b4"},{"start":480,"end":483,"marker":"bibr","target":"#b5"},{"start":527,"end":530,"marker":"bibr","target":"#b6"},{"start":805,"end":808,"marker":"bibr","target":"#b7"},{"start":1014,"end":1017,"marker":"bibr","target":"#b8"},{"start":1109,"end":1113,"marker":"bibr","target":"#b9"},{"start":1267,"end":1271,"marker":"bibr","target":"#b10"},{"start":1272,"end":1276,"marker":"bibr","target":"#b11"},{"start":1290,"end":1293,"marker":"bibr","target":"#b1"},{"start":1424,"end":1427,"marker":"bibr","target":"#b1"}]}]},{"title":"The Model of Composite Documents and Descriptions","paragraphs":[]},{"title":"Documents and Composite Documents","paragraphs":[{"text":"First of all, our model does not consider contents of documents. Our model deals only with structures of document composition and document descriptions. Therefore, we focus only on a document representation consisting of an identifier and a set of parts, as this is sufficient for our metadata management. Therefore, hereafter, when we talk of a document we shall actually mean its representation by an identifier and a set of parts. ","refs":[]}]},{"title":"Definition 1 (The representation of a document","paragraphs":[{"text":"In this paper, we assume that every composite document d is a tree in which d is the root and comp(d) is the set of nodes. Our choice is justified by the fact that (1) the tree is the most suitable structure for representing traditional books that are hierarchically organized, and (2) the tree is also a common structure adopted by many existing document composition environments including open textbook platforms. Based on this assumption, for a composite document d and its part d ∈ parts(d), d is called child of d, and d is called parent of d , denoted as parent(d ). It is important to note that in our model the ordering of parts in a composite document is ignored because it is not relevant to our purposes. As we shall see shortly, deriving the description of a composite document from the descriptions of its parts does not depend on any ordering of the parts.","refs":[]}]},{"title":"Taxonomy and Description","paragraphs":[{"text":"Informally, descriptions in our model are just sets of terms taken from a taxonomy. We would like to start our explanation about descriptions from the formal definition of taxonomy in our model.","refs":[]}]},{"title":"Definition 3 (Taxonomy).","paragraphs":[{"text":"Let T be a set of keywords, or terms. A taxonomy T defined over T is a tuple (T, ) where is a reflexive and transitive binary relation over T , called subsumption relation.","refs":[]},{"text":"Given two terms, s and t, if s t then we say that s is subsumed by t, or that t subsumes s. In our work, we assumes that every taxonomy (T, ) is a tree in which the nodes are the terms of T and where there is an arrow s → t iff s In this example, the term Sort subsumes the term Quick sort, OOL subsumes Java and C++. Due to the transitivity of the subsumption relation, the term Programming subsumes all terms in the tree including itself. In the rest of this paper, we use a symbol tail(t) that stands for the set of all terms in the taxonomy strictly subsumed by t, i.e., tail(t) = {s|s ≺ t}.","refs":[]},{"text":"In order to make a document sharable, a description of its content must be provided, so that users can judge whether the document in question matches their needs. Our model allows any sets of terms from a taxonomy as descriptions.","refs":[]}]},{"title":"Definition 4 (Description).","paragraphs":[{"text":"Given taxonomy (T, ), we call description in T any set of terms from T .","refs":[]}]},{"title":"Inferred Descriptions","paragraphs":[{"text":"Reduction of a Description. A description can be redundant if some of the terms it contains are subsumed by other terms in the description. For instance, the description {Sort, Quick sort, java} is redundant, as Sort subsumes Quick sort. Redundant descriptions are sometimes undesirable as they can lead to redundant computations. Now we introduce the concept of non-redundant, or reduced descriptions, defined as follows:","refs":[]},{"text":"Definition 5 (Reduced description). Given taxonomy (T, ), a set of terms D from T is called reduced if for any terms s and t in D, s t and t s.","refs":[]},{"text":"Following the above definition, we can make a description non-redundant by either removing all but its minimal terms, or by removing all but its maximal terms. We shall assume the former as it produces more accurate descriptions. This should be clear from our previous example, where the description {Quick sort, Java} is more accurate than {Sort, Java}. Hence the following definition: Definition 6 (Reduction). Given a description D in taxonomy (T, ), we call reduction of D, denoted as reduce(D), the set of minimal terms in D with respect to the subsumption .","refs":[]},{"text":"The important point to note is that even if a description created by an author contains redundancy, our model respects the original form of the description and does not remove anything from the description. The choice of terms to include in a description is left entirely up to description authors. Reduction of descriptions and other concepts of inferred descriptions are made only internally, or for suggesting \"hints\" for users to create descriptions with less effort.","refs":[]},{"text":"Therefore we distinguish between descriptions created by authors and descriptions inferred automatically by using algorithms. For a document d, the former type of description is called the author description of d, denoted as ADescr(d): author descriptions are exactly the descriptions that authors create and a document repository stores. The latter type of description is what is generated internally, by machines, for helping authors in description authoring.","refs":[]},{"text":"Additionally, we would like to introduce two more concepts of inferred descriptions.","refs":[]},{"text":"Cover of a Document. To make a description of a composite document, it is sometimes useful to know all topics covered by the components of the document. Now we introduce the concept of cover of a document d that is an inferred description formed with a minimum set of terms and semantically covers all terms appearing in descriptions of d's components. The cover of a document is formally defined as follows: Definition 7 (Cover of a document). Given a document d, the cover of d, denoted as cover(d), is a description recursively defined as follows:","refs":[]},{"text":"Informally, the cover of a document is the minimum but most accurate description of the document. To create the description of a document, authors should choose terms present in the cover of the document, or terms subsuming at least one term in the cover. Otherwise the created description might contain terms not related to any component of the described document.","refs":[]},{"text":"Summary of a Document. On the other hand, sometimes we want to summarize topics of a big composite document. There are several possible approaches for summarization. One intuitive approach is to extract common topics shared by all components of a document. In order to formalize this definition, we introduce the following refinement relation on descriptions.","refs":[]}]},{"title":"Definition 8 (Refinement relation).","paragraphs":[{"text":"Let D 1 and D 2 be two descriptions. We say that D 1 is finer than","refs":[]},{"text":"For example, D sum is finer than D sum , i.e., D sum D sum because for every term t in D sum , we can find a term in D sum subsumed by t such as in our example, where Sort Algorithms and OOL Languages.","refs":[]},{"text":"The refinement relation is clearly reflexive and transitive. Moreover, over reduced descriptions becomes antisymmetric. From these properties of , we can say that is a partial order over reduced descriptions, and a set of reduced descriptions has a least upper bound in . Here we omit the detail and just introduce the following proposition and theorem. For detailed discussion and proofs of them, see [2]. The least upper bound (lub) of descriptions is the most accurate set of terms representing what the descriptions have in common. Therefore, by obtaining the lub of descriptions of documents, we can get the most accurate description that summarizes what the documents have in common. By using this theorem, we can now define the summary of a document as following: Definition 9 (Summary of a document). Given a document d, the summary of d, denoted as summary(d), is a description defined as follows:","refs":[{"start":402,"end":405,"marker":"bibr","target":"#b1"}]},{"text":"The algorithm summary illustrated in Fig. 2 recursively computes the summary of a given document. We shall use these algorithms in the next section for helping authors to make descriptions of new documents.","refs":[{"start":42,"end":43,"marker":"figure","target":"#fig_2"}]}]},{"title":"Metadata-Aided Suggestion in Document Description Authoring","paragraphs":[{"text":"In this section, we would like to explain how we can use inferred descriptions of documents to help users to create and manage document descriptions. As we already mentioned, the author description of a document is left entirely up to description authors. Therefore, the algorithms explained in the previous section are not intended to generate descriptions of documents automatically. The purpose of the algorithms is to suggest inferred descriptions to avoid making descriptions from scratch. Before entering into details of our suggestion process, we would like to discuss two preliminary topics.","refs":[]}]},{"title":"Soundness of Descriptions.","paragraphs":[{"text":"While authors can freely choose any terms to make descriptions, are there any criteria that descriptions should satisfy? Our opinion is that every description should satisfy some kind of \"soundness\". If a description contains a term t, the described document should contain something related to the term t. Now we formalize soundness of a description as follows: We should comment on the last part of this definition. As we mentioned several times, our model does not deal with contents of documents. Consequently, our model has no way to determine whether an author description of an atomic document satisfies soundness or not with respect to the document content. Therefore, we firstly believe it. Our model depends on an assumption that all descriptions of atomic documents satisfy soundness.","refs":[]},{"text":"In the rest of this paper, we would like to adopt the soundness criterion that requires every author description to be sound. We think it is a reasonable criterion for keeping integrity of a document repository. Without this criterion, a document repository might have an untrustworthy description that contains terms not related to any parts of a described document.","refs":[]},{"text":"The soundness of a document description is defined over the cover of a document. Therefore, the algorithm cover illustrated in Fig. 2 can validate soundness of descriptions and compute cover of descriptions in parallel by using simple depth-first search. We also use a symbol dtDom(d) that stands for the set of all terms in T such that we can use for describing a composite document d, i.e.,","refs":[{"start":132,"end":133,"marker":"figure","target":"#fig_2"}]},{"text":"Types of Terms for Suggestion. Briefly, suggestion is an activity to indicate a suggestion list of choices to users for allowing them to easily specify input values. In this paper, we do not deal with details of user interaction design.","refs":[]},{"text":"Here we would like to just classify terms for suggestion into the following three different types of term sets by how terms are initially selected in a suggestion list and what users can do on terms in a suggestion list.","refs":[]},{"text":"-D rec (recommended): All terms in this set are selected as default and users can remove terms from the set -D opt (optional): All terms in this set are not selected as default and users can add terms to the set -D obso (obsolete): All terms in this set are not selected as default and users cannot select any of them. ","refs":[]}]},{"title":"Create New Atomic Documents","paragraphs":[{"text":"When an author creates a new atomic document as an independent one, the author needs to choose terms to define its description by taking into account the document content. However, if an author writes a new atomic document as a part of an existing composite document, we can suggest terms for its description by taking into account the descriptions of existing components. Let d p be a composite \"parent\" document. Suppose an author has created a new atomic document d as a child of d p and now he is going to define an author description ADescr(d). Firstly, if a parent document has its summary, the same summary should also be a \"sound\" description of a new child document. In this case, the author should define an author description ADescr(d) such that ADescr(d) summary(d p ).","refs":[]},{"text":"See the example illustrated in Fig. 3. In this example, the summary D sum of d p is {Sort, Java}. If the author defines ADescr(d) as {Sort, Java} or {Quick sort, Java}, D sum does not change. On the other hand, if the author defines ADescr(d) as {Sort}, D sum will be changed to {Sort} that has less accuracy. It is the absence of Java from ADescr(d) that causes such change of the document summary. Therefore, even if the author wants to remove this Secondly, a description of a new child document should be more specialized than the summary of its parent. We can perform such specialization (1) by specializing a part of the summary of a parent, or (2) by adding new terms in T . Regarding point (1), we can extract promising candidates of terms for specialization by comparing descriptions of siblings. Let's go back to the example in Fig. 3. In this example, siblings of d have {Heap sort, Java}, {Bubble sort, Java}, {Sort, Java, Theory} as their descriptions. Taking D sum = {Sort, Java} into account, we can see that Sort is specialized in descriptions of some siblings but Java is not. Therefore, tails of Sort, for instance Quick sort and Merge sort, have higher priority for specialization than tails of Java. We use a symbol specializedIn(d) that stands for the set of all terms in summary(d) that are specialised in some descriptions of d's parts, i.e., specializedIn(d","refs":[{"start":36,"end":37,"marker":"figure","target":null},{"start":843,"end":844,"marker":"figure","target":null}]},{"text":"Regarding point (2), any terms in T also can be candidates for specialization but have lower priority than the ones suggested in (1).","refs":[{"start":129,"end":132,"marker":"bibr","target":"#b0"}]},{"text":"Summing up, for a new atomic document d which is a part of d p , we can suggest the following sets of terms for a description of d.","refs":[]},{"text":"In the above sets of terms, D rec ∪ D opt1 ∪ D opt2 is equal to T . This means that authors can choose any sets of terms from T as a description of an atomic document even if the atomic document is a part of a composite document.","refs":[]}]},{"title":"Create New Composite Documents","paragraphs":[{"text":"On the other hand, to define a description of a composite document, there is a strict criterion the description should satisfy, namely soundness. Suppose an author has made a composite document d with its components comp(d) and now he is going to define an author description ADescr(d). In this case, any term in ADescr(d) should be a member of dtDom(d) = {t|t ∈ T ∧∃t ∈ cover(d)∧t t} to satisfy the soundness. Therefore we use dtDom(d) as D opt for suggestion.","refs":[]},{"text":"Regarding D rec , there is no criterion for determining terms that a description of a composite document should have. However, to construct a description from an empty set of terms is a troublesome task. Therefore, here we would like to use a summary of a document as the starting point of description authoring. D sum = summary(d) is suggested as D rec for a description.","refs":[]},{"text":"The important point to note is that, in this case, terms in D sum are not mandatory for a description of d. The author can remove terms belonging to D sum from ADescr(d) to hide some contents included in d. For instance, in the example illustrated in Fig. 4, the summary of the composite document is {Sort, OOL}. However, if the description author thinks that programming languages are not in important topic in the context of the composite document, he can drop OOL and keep only {Sort} as a description of the composite document.","refs":[{"start":256,"end":257,"marker":"figure","target":null}]},{"text":"As a consequence, for a new composite document d, we can suggest the following sets of terms for a description of d.","refs":[]},{"text":"Additionally, when an author makes a new composite document as a part of an existing document, we can give more accurate suggestion by comparing with siblings of the new document. See the example illustrated in Fig. 5. In this example, originally the summary of d = d 4 + d 5 is just {Quick sort}. However, this description might be too brief because all siblings of d have terms related to programming languages in their descriptions. We can capture such topics shared by siblings as a summary of a parent document. In this example, the parent document d p = d 1 + d 2 + d 3 has its summary {Sort, Languages}. Therefore, terms in cover(d) related to, more precisely, subsumed by Sort or Languages also should be suggested as a part of a description of d. As a result, we get C++ as an additional member of D rec . Finally, we can suggest {Quick sort, C++} as an initial description of d.","refs":[{"start":216,"end":217,"marker":"figure","target":"#fig_4"}]},{"text":"To sum up, for a new composite document d which is a part of d p , we can suggest the following sets of terms for a description of d.","refs":[]}]},{"title":"Removing Parts of Documents or Document Descriptions","paragraphs":[{"text":"When an author removes some parts of a composite document, or terms from descriptions of document components, such operation might change the cover of the document therefore it might affect soundness of the document description. To preserve soundness of descriptions, risk of soundness violation should be checked before applying operations and be appropriately notified with a list of terms that should be removed to keep soundness.","refs":[]},{"text":"The algorithm checkSoundness in Fig. 6 takes a document d and a set of terms D to remove from ADescr(d), or cover(comp(d)) when the document d ","refs":[{"start":37,"end":38,"marker":"figure","target":null}]},{"text":"a document having a set of terms D v that violate the soundness criterion. This algorithm recursively propagates terms in D from a child document to its parent. In each propagation step, terms compensated by descriptions of sibling documents are removed from D.","refs":[]},{"text":"By using this algorithm, we can notify authors about document descriptions affected by removing operations, and indicate suggestion lists of terms for updating descriptions to keep soundness. Suppose an author intends to remove a set of terms D from a description of d. In this case, firstly we need to compute a set of mappings M v = checkSoundness(d p , D). Then for each d v with a term set D v in M v = {m v : d v → D v }, we can suggest the following sets of terms:","refs":[]},{"text":"-","refs":[]}]},{"title":"Concluding Remarks","paragraphs":[{"text":"In this paper, we have presented a model for metadata of composite documents. Our model allows authors to freely choose terms from a taxonomy to make descriptions. However, once documents are placed in composite documents, we can infer various restrictions and suggestions on terms for descriptions by taking into account soundness of descriptions. We think soundness of descriptions is a simple but essential criterion for keeping integrity of a document repository.","refs":[]},{"text":"In future work, an urgent task is prototyping for identifying matching points and mismatch between the model we have proposed here and problems in practice. As we have seen in this paper, the modeling part of this study is very abstract. Currently we have a plan to prototype a document management system that uses this model in the metadata management part.","refs":[]},{"text":"Regarding the model, firstly, we would like to extend the concept of document summary. In the current definition, a document summary summarizes topics shared by all atomic documents. However, summaries produced by using this definition are somehow too brief. Instead of summarizing at the level of atomic documents, we can summarize a document at a coarser granularity, for instance, direct children of a document to summarize, so that we can get more detailed summaries. In a future study we would like to introduce a degree of summarization to control the level of detail of summaries, and use it for assisting description authoring.","refs":[]},{"text":"Finally, we have discussed only a case that a document has up to one parent. However, if a document is used as part of multiple composite documents, a document can have multiple parents. In this case, we can compare usage of the same document in different composite documents. We would like to find a way to use such comparison of document usage for improving term suggestion.","refs":[]}]}],"tables":{"tab_0":{"heading":"Definition 2 (Components of a document). Let","description":"). A document consists of an identifier d together with a set of documents, called the parts of d and denoted as parts(d). If parts(d) = ∅ then d is called atomic, else it is called composite. For notational convenience, we shall often write d = d 1 + d 2 + . . . + d n to stand for parts(d) = {d 1 , d 2 , . . . , d n }. Based on the concept of parts, we can now define the concept of component. d = d 1 + d 2 + . . .+ d n . The set of components of d, denoted as comp(d), is defined recursively as follows:","rows":[]}},"abstract":{"title":"Abstract","paragraphs":[{"text":"In this paper, we propose a simple model for metadata management in a document composition environment. Our model considers (1) composite documents in the form of trees, whose nodes are either atomic documents, or other composite documents, and (2) metadata or descriptions of documents in the form of sets of terms taken from a taxonomy. We present a formal definition of our model and several concepts of inferred descriptions. Inferred descriptions can be used for term suggestion that allows users to easily define and manage document descriptions by taking into account what we call soundness of descriptions.","refs":[]}]}}